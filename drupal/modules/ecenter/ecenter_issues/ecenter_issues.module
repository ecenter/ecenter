<?php
/**
 * @file ecenter_issues.module
 *
 * The Ecenter Issues module defines two content types with CCK field
 * definitions:
 *
 *  - Network query: A representation of a network query sent to the E-Center
 *    data retrieval service.
 *  - Issue: An issue with one or more network queries associated via a node
 *    reference field.
 *
 * Beyond defining the data types, this module is resposible for handling form
 * manipulation and other logic required to make the user experience of adding
 * and saving network data seamless.
 *
 * Much of what is possible with the data structure is hidden from normal users
 * for now -- all queries and issues must be created through the issue node
 * editing form.
 */
include_once('ecenter_issues.features.inc');

/**
 * Implementation of hook_perm().
 */
function ecenter_issues_perm() {
  return array('access ecenter issue query values');
}

/**
 * Implementation of hook_init().
 */
function ecenter_issues_init() {
  if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
    $node = node_load(arg(1));
  }
  if (arg(0) == 'issues' || (!empty($node) && $node->type == 'issue')) {
    drupal_add_css(drupal_get_path('module', 'ecenter_issues') .'/css/ecenter-issues.css');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function ecenter_issues_form_alter(&$form, &$form_state, $form_id) {
  // Hide query data from users without permission
  if (!user_access('access ecenter issue query values') 
    && $form_id == 'network_query_node_form') {
    $form['field_query_data']['#access'] = FALSE;
  }
 
  // Munge issue node form
  if ($form_id == 'issue_node_form') {

    $form['og_nodeapi']['#group'] = NULL;
    $form['revision_information']['#group'] = NULL;

    // If no initial groups, collapse fieldset
    if (empty($form['og_initial_groups']['#value'])) {
      $form['og_nodeapi']['#collapsed'] = TRUE;
    }

    drupal_add_css(drupal_get_path('module', 'ecenter_issues') .'/css/ecenter-issues.css');

    // Apply always
    $form['body_field']['body']['#required'] = TRUE;
    $form['body_field']['body']['#prefix'] = '<div class="clearfix">';
    $form['body_field']['body']['#suffix'] = '</div>';

    $form['field_issue_query']['#access'] = FALSE;

    $form['title']['#prefix'] = '<div class="title-field-wrapper clearfix">';
    $form['title']['#suffix'] = '</div>';

    $form['revision_information']['#access'] = FALSE;

    // If new, populate values and do additional checking
    if (!$form['#node']->nid && !empty($_REQUEST['query'])) {
      $params = ecenter_issues_parse_params($_REQUEST['query']);
      $data = ecenter_network_get_data($params['src'], $params['dst'],
        $params['start'], $params['end']);

      // Query provided, but malformed or no data
      if (empty($data)) {
        $form = array(
          'error' => array(
            '#value' => t('The query provided did not return any data. Please
              visit the <a href="@network">weathermap</a> and try again.', array(
                '@network' => url('weathermap'),
              )),
          ),
        );
        return;
      }

      // Add submit handler that creates new node reference (or gets the
      // old one)
      array_unshift($form['#submit'], 'ecenter_issues_issue_add_data');

      // Create title from parameters
      list($src_type, $src_value) = explode(':', $params['src'], 2);
      list($dst_type, $dst_value) = explode(':', $params['dst'], 2);
      $form['title']['#default_value'] = t('@src to @dst, @start - @end (UTC)',
        array(
          '@src' => $src_value,
          '@dst' => $dst_value,
          '@start' => $params['start'],
          '@end' => $params['end'],
        )
      );
    }
  }
}

/**
 * Submit callback for issues
 */
function ecenter_issues_issue_add_data($form, &$form_state) {
  global $user;
  $params = ecenter_issues_parse_params($_REQUEST['query']);

  $node = ecenter_issues_get_query_node($params);

  // If query doesn't exist, create new query node
  if (!$node->nid) {
    list($src_type, $src_value) = explode(':', $params['src'], 2);
    list($dst_type, $dst_value) = explode(':', $params['dst'], 2);
    $src_field_name = 'field_query_src_'. $src_type;
    $dst_field_name = 'field_query_dst_'. $dst_type;

    $node = new stdClass();
    $node->type = 'network_query';
    $node->title = t('@src to @dst, @start - @end',
      array('@src' => $src_value, '@dst' => $dst_value,
        '@start' => $params['start'], '@end' => $params['end'],
      )
    );
    $node->uid = $user->uid;
    $node->created = strtotime("now");
    $node->changed = strtotime("now");
    $node->status = 1;
    $node->comment = 0;
    $node->promote = 0;
    $node->moderate = 0;
    $node->sticky = 0;

    $node->$src_field_name = array(array('value' => $src_value));
    $node->$dst_field_name = array(array('value' => $dst_value));

    // @TODO this should go in the network_query save routine somehow...
    $data = ecenter_network_get_data($params['src'], $params['dst'],
      $params['start'], $params['end']);
    
    $node->field_query_data = array(array('value' => serialize($data)));
    $node->field_query_start = array(array(
      'value' => $params['start'],
    ));
    $node->field_query_end = array(array(
      'value' => $params['end'],
    ));

    node_save($node);
  }

  // Add nid of query node to nodereference field
  $form_state['values']['field_issue_query'][0] = array('nid' => $node->nid);
}

/**
 * Get query node based on parameters 
 *
 * @param $params
 *   Array of parameters ('src', 'dst', 'start', 'end')
 * @return
 *   Node object
 */
function ecenter_issues_get_query_node($params) {
  list($src_type, $src_value) = explode(':', $params['src'], 2);
  list($dst_type, $dst_value) = explode(':', $params['dst'], 2);
  $src_field_name = 'field_query_src_'. $src_type;
  $dst_field_name = 'field_query_dst_'. $dst_type;

  $start = $params['start'];
  $end = $params['end'];
  $start_query = date_format(date_create($start, timezone_open('UTC')), 
    'Y-m-d\TH:i:s');
  $end_query = date_format(date_create($end, timezone_open('UTC')),
    'Y-m-d\TH:i:s');

  // Get all field definitions
  $start_field = content_fields('field_query_start');
  $start_db_info = content_database_info($start_field);
  $end_field = content_fields('field_query_end');
  $end_db_info = content_database_info($end_field);
  $src_field = content_fields('field_query_src_'. $src_type);
  $src_db_info = content_database_info($src_field);
  $dst_field = content_fields('field_query_dst_'. $dst_type);
  $dst_db_info = content_database_info($dst_field);

  $sql = "SELECT n.nid FROM {node} n
    INNER JOIN {" . $start_db_info['table'] ."} start ON n.vid = start.vid
    INNER JOIN {" . $end_db_info['table'] ."} end ON n.vid = end.vid
    INNER JOIN {" . $src_db_info['table'] ."} src ON n.vid = src.vid
    INNER JOIN {" . $dst_db_info['table'] ."} dst ON n.vid = dst.vid
    WHERE
    start.". $start_db_info['columns']['value']['column'] ." = '%s' AND
    end.". $end_db_info['columns']['value']['column'] ." = '%s' AND
    src.". $src_db_info['columns']['value']['column'] ." = '%s' AND
    dst.". $dst_db_info['columns']['value']['column'] ." = '%s'";

  $nid = db_result(db_query($sql,
    $start_query, $end_query, $src_value, $dst_value));

  return node_load($nid);
}

/**
 * Get issues for a query
 *
 * @TODO Support more flexibility than exact matching used here
 * 
 * @param $node
 *   A query node object
 * @return
 *   An array of issue objects
 */
function ecenter_issues_get_query_issues($node) {
  $query_field = content_fields('field_issue_query');
  $query_db_info = content_database_info($query_field);
  $sql = "SELECT n.nid FROM {node} n
    INNER JOIN {" . $query_db_info['table'] ."} query ON n.vid = query.vid
    WHERE
    query.". $query_db_info['columns']['nid']['column'] ." = %d";

  $result = db_query($sql, $node->nid);
  while ($issue = db_fetch_object($result)) {
    $issues[] = node_load($issue->nid);
  }
  return $issues;
}

/**
 * Helper function to parse parameters for use in creating issues
 *
 * @param $param_string
 *   A querystring formatted string of parameters
 * @return
 *   An array representation of querystring parameters
 */
function ecenter_issues_parse_params($param_string) {
  // Parse querystring
  $raw_params = explode('&', urldecode($param_string));
  $params = array();
  foreach ($raw_params as $param) {
    list($key, $value) = explode('=', $param);
    $params[$key] = $value;
  }
  return $params;
}

/**
 * Given an issue node, get link params
 *
 * @param $node
 *   Issue node object
 * @return 
 *   An array representation of querystring needed to reconstruct permalink
 */
function ecenter_issues_get_node_query($node) {
  $query = node_load($node->field_issue_query[0]['nid']);

  $start = date_create($query->field_query_start[0]['value'], 
    timezone_open('UTC'));
  $end = date_create($query->field_query_end[0]['value'],
    timezone_open('UTC'));

  $query = array(
    'src' => (!empty($query->field_query_src_hub[0]['value'])) ? 
      'hub:'. $query->field_query_src_hub[0]['value'] :
      'ip:'. $query->field_query_src_ip[0]['value'],
    'dst' => (!empty($query->field_query_dst_hub[0]['value'])) ? 
      'hub:'. $query->field_query_dst_hub[0]['value'] :
      'ip:'. $query->field_query_dst_ip[0]['value'],
    'start' => date_format($start, 'Y-m-d H:i:s'),
    'end' => date_format($end, 'Y-m-d H:i:s'),
  );
  return $query;
}
