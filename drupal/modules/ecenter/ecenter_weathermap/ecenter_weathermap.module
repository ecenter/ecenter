<?php
// $Id$

/**
 * @file
 * E-Center network query interface.
 */

/**
 * Implementation of hook_menu().
 */
function ecenter_weathermap_menu() {
  $items['weathermap'] = array(
    'title' => 'E-Center Weather Map',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ecenter_weathermap_select_form'),
    'access arguments' => array('access ecenter weathermap'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/ecenter'] = array(
    'title' => 'E-Center Weathermap',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ecenter_weathermap_admin_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer ecenter weathermap'),
    'description' => 'Configure the E-Center weather map.',
    'file' => 'ecenter_weathermap.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function ecenter_weathermap_perm() {
  return array('access ecenter weathermap', 'administer ecenter weathermap');
}

/**
 * Implementation of hook_theme().
 */
function ecenter_weathermap_theme() {
  $options = array(
    'file' => 'ecenter_weathermap.theme.inc',
    'path' => drupal_get_path('module', 'ecenter_weathermap') .'/theme',
  );
  $registry = array(
    'ecenter_weathermap_hop_option' => array(
      'arguments' => array(
        'hop' => NULL,
      )
    ) + $options,
   'ecenter_weathermap_data' => array(
      'template' => 'ecenter-weathermap-data',
      'arguments' => array(
        'data' => NULL,
        'params' => NULL,
      )
    ) + $options,
    'ecenter_weathermap_traceroute' => array(
      //'template' => 'ecenter-weathermap-traceroute',
      'arguments' => array(
        'hops' => NULL,
      )
    ) + $options,
  );
  foreach (_ecenter_weathermap_get_data_types() as $type) {
    $registry['ecenter_weathermap_render_data_'. $type] = array(
      'arguments' => array(
        'data' => NULL,
      ),
    ) + $options;
  }
  return $registry;
}

/**
 * Implementation of hook_init().
 */
function ecenter_weathermap_init() {
  if (arg(0) == 'weathermap' && !arg(1)) {
    // We need quickselect to get added to behaviors first, so when ensure it executes first
    drupal_add_js(drupal_get_path('module', 'quickselect') .'/js/quickselect-behavior.js');

    // Also need the jquery form library
    drupal_add_js('misc/jquery.form.js');

    // Add jqPlot
    $jq_path = drupal_get_path('module', 'jqplot');
    drupal_add_js($jq_path .'/jqplot/excanvas.min.js');
    drupal_add_js($jq_path .'/jqplot/jquery.jqplot.js');

    // jqPlot plugins
    drupal_add_js($jq_path .'/jqplot/plugins/jqplot.dateAxisRenderer.js');
    drupal_add_js($jq_path .'/jqplot/plugins/jqplot.highlighter.js');
    drupal_add_js($jq_path .'/jqplot/plugins/jqplot.cursor.js');
    drupal_add_js($jq_path .'/jqplot/plugins/jqplot.canvasTextRenderer.js');
    drupal_add_js($jq_path .'/jqplot/plugins/jqplot.canvasAxisLabelRenderer.js');

    // Our libraries and behaviors
    drupal_add_js($jq_path .'/js/jquery.uuid.js');
    drupal_add_js($jq_path .'/js/jquery.tablechart.js');
    drupal_add_js($jq_path .'/js/jqplot-behaviors.js');

    // Query UI behaviors and libraries
    drupal_add_js(drupal_get_path('module', 'ecenter_weathermap') .'/js/jquery.datehide.js');
    drupal_add_js(drupal_get_path('module', 'ecenter_weathermap') .'/js/jquery.traceroute.js');
    drupal_add_js(drupal_get_path('module', 'ecenter_weathermap') .'/js/behaviors.js');

    // Additional CSS overrides
    drupal_add_css(drupal_get_path('module', 'ecenter_weathermap') .'/css/plot.css');

    $inline_css = array(
      '.ecenter-critical' => array('color' => variable_get('ecenter_weathermap_threshold_critical_color', '#cc0000'),),
      '.ecenter-marginal' => array('color' => variable_get('ecenter_weathermap_threshold_marginal;_color', '#fe890c'),),
      '.ecenter-good' => array('color' => variable_get('ecenter_weathermap_threshold_marginal;_color', '#1c8a24'),),
    );
    inline_css_add_css($inline_css);
  }
}

/**
 * Primary selection form definition.
 */
function _ecenter_weathermap_select_form() {
  $inc = variable_get('ecenter_weathermap_time_increment', 5);

  // Set up quick select options
  $quickselect_options = array(
    'emulateDropdown' => TRUE,
    'maxHeight' => '400px',
    'exactMatch' => TRUE,
  );

  // Date select
  $form['date_wrapper'] = array(
    '#prefix' => '<div id="date-wrapper" class="clearfix">',
    '#suffix' => '</div>',
  );
  $form['date_wrapper']['start_date'] = array(
    '#type' => 'date_popup',
    '#title' => t('Start date'),
    '#date_increment' => $inc,
  );
  $form['date_wrapper']['end_date'] = array(
    '#type' => 'date_popup',
    '#title' => t('End date'),
    '#date_increment' => $inc,
  );
  $form['date_wrapper']['description'] = array(
    '#prefix' => '<div id="description-wrapper">',
    '#suffix' => '</div>',
    '#value' => t('Use care when setting the date. Date ranges longer than a few hours can lead to very slow queries.'),
  );

  // Select source and destination IP -- convoluted because of AHAH
  $form['ip_select'] = array(
    '#prefix' => '<div id="ip-select-wrapper" class="clearfix">',
    '#suffix' => '</div>',
  );
  $form['ip_select']['src_ip_wrapper'] = array(
    '#prefix' => '<div id="src-ip-wrapper">',
    '#suffix' => '</div>',
  );
  $form['ip_select']['src_ip_wrapper']['src_ip'] = array(
    '#title' => t('Source'),
    '#type' => 'quickselect',
    '#options' => array('' => 'Select a source'),
    '#cols' => 50,
    '#required' => TRUE,
    '#quickselect_options' => $quickselect_options,
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('ip_select', 'dst_ip_wrapper')),
      'wrapper' => 'dst-ip-wrapper',
    ),
  );
  $form['ip_select']['dst_ip_wrapper'] = array(
    '#prefix' => '<div id="dst-ip-wrapper">',
    '#suffix' => '</div>',
  );
  $form['ip_select']['dst_ip_wrapper']['dst_ip'] = array(
    '#title' => t('Destination'),
    '#type' => 'quickselect',
    '#options' => array('' => 'Select a destination'),
    '#cols' => 50,
    '#required' => FALSE,
    '#disabled' => TRUE,
    '#quickselect_options' => $quickselect_options,
    '#prefix' => '<div class="dst-ip-wrapper">',
    '#suffix' => '</div>',
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('results_wrapper', 'results')),
      'wrapper' => 'results-wrapper',
    ),
  );

  // Map
  $preset = openlayers_preset_load('ecenter_weathermap');
  $map = openlayers_render_map($preset->data, $preset->name);

  // Network map
  $form['weathermap'] = array(
    '#prefix' => '<div id="weathermap">',
    '#value' => $map,
    '#suffix' => '</div>',
  );

  // Submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array('class' => 'no-js'),
  );

  // Data results display
  $form['results_wrapper'] = array(
    '#prefix' => '<div id="results-wrapper">',
    '#suffix' => '</div>',
  );
  $form['results_wrapper']['results'] = array(
    '#value' => '&nbsp;',
  );

  // For ahah helper
  $form['#tree'] = TRUE;

  return $form;
}

/**
 * Primary selection form.
 *
 * The basic form is defined in _ecenter_weathermap_select_form. This function
 * primarily processes the form.
 */
function ecenter_weathermap_select_form(&$form_state) {
  $client = ecenter_weathermap_get_client();

  // Get base form and register with ahah_helper
  $form = _ecenter_weathermap_select_form();
  ahah_helper_register($form, $form_state);

  // Add ahah_helper override
  drupal_add_js(drupal_get_path('module', 'ecenter_weathermap') .'/js/ahah.js', 'footer');

  // Get query string or POSTed (manually or via AJAX) values. Form values "beat" query string values.
  $src_ip = (!empty($form_state['storage']['ip_select']['src_ip_wrapper']['src_ip']))
    ? $form_state['storage']['ip_select']['src_ip_wrapper']['src_ip']
    : $_REQUEST['src_ip'];

  $dst_ip = (!empty($form_state['storage']['ip_select']['dst_ip_wrapper']['dst_ip']))
    ? $form_state['storage']['ip_select']['dst_ip_wrapper']['dst_ip']
    : $_REQUEST['dst_ip'];

  // Date values are HAIRY
  if (is_array($form_state['storage']['date_wrapper']['start_date'])) {
    $start_date = $form_state['storage']['date_wrapper']['start_date']['date'] .' '. $form_state['storage']['date_wrapper']['start_date']['time'];
  }
  else if (!empty($form_state['storage']['date_wrapper']['start_date'])) {
    $start_date = $form_state['storage']['date_wrapper']['start_date'];
  }
  else if (!empty($_REQUEST['start'])) {
    $start_date = $_REQUEST['start'];
  }
  else {
    $start_date = format_date(time() - 4500, 'custom', 'Y-m-d H:i');
  }

  if (is_array($form_state['storage']['date_wrapper']['end_date'])) {
    $end_date = $form_state['storage']['date_wrapper']['end_date']['date'] .' '. $form_state['storage']['date_wrapper']['end_date']['time'];
  }
  else if (!empty($form_state['storage']['date_wrapper']['end_date'])) {
    $end_date = $form_state['storage']['date_wrapper']['end_date'];
  }
  else if (!empty($_REQUEST['end'])) {
    $end_date = $_REQUEST['end'];
  }
  else {
    $end_date = format_date(time() - 900, 'custom', 'Y-m-d H:i');
  }

  // Set dates
  $form['date_wrapper']['start_date']['#default_value'] = $start_date;
  $form['date_wrapper']['end_date']['#default_value'] = $end_date;

  // Always get source hubs
  $src_hops = $client->getHubs();
  $src_options = array('' => t('Select a source'));
  foreach ($src_hops['response'] as $hop) {
    $src_options[$hop->ip_noted] = theme('ecenter_weathermap_hop_option', $hop);
  }
  $form['ip_select']['src_ip_wrapper']['src_ip']['#options'] = $src_options;

  // Get allowed destinations for a given source IP
  if ($src_ip) {
    if (array_key_exists($src_ip, $form['ip_select']['src_ip_wrapper']['src_ip']['#options'])) {
      $form['ip_select']['src_ip_wrapper']['src_ip']['#default_value'] = $src_ip;
    }
    else {
      unset($src_ip);
    }

    $dst_hops = $client->getHubs($src_ip);
    $dst_options = array('' => t('Select a destination'));
    foreach ($dst_hops['response'] as $hop) {
      $dst_options[$hop->ip_noted] = theme('ecenter_weathermap_hop_option', $hop);
    }

    $form['ip_select']['dst_ip_wrapper']['dst_ip']['#options'] += $dst_options;
    $form['ip_select']['dst_ip_wrapper']['dst_ip']['#disabled'] = FALSE;
    $form['ip_select']['dst_ip_wrapper']['dst_ip']['#required'] = TRUE;
  }

  if ($src_ip && $dst_ip) {
    if (array_key_exists($dst_ip, $form['ip_select']['dst_ip_wrapper']['dst_ip']['#options'])) {
      $form['ip_select']['dst_ip_wrapper']['dst_ip']['#default_value'] = $dst_ip;
    }
    else {
      unset($dst_ip);
    }
  }

  if ($src_ip && $dst_ip && $start_date && $end_date) {

    $start_date_adjusted = _ecenter_weathermap_date_to_utc($start_date);
    $end_date_adjusted = _ecenter_weathermap_date_to_utc($end_date);

    $data = ecenter_weathermap_get_data($src_ip, $dst_ip, $start_date_adjusted, $end_date_adjusted);
    $params = array(
      'src_ip' => $src_ip,
      'dst_ip' => $dst_ip,
      'start' => $start_date_adjusted,
      'end' => $end_date_adjustedm
    );

    // If we've got the data (at bare minimum, a traceroute), delegate to rendering function
    if ($data) {
      ecenter_weathermap_refresh_map('ecenter_weathermap', 'openlayers-map-auto-id-0');
      $form['results_wrapper']['results']['#value'] = theme('ecenter_weathermap_data', $data, $params);
    }
    else {
      watchdog('ecenter', 'Query returned no results: <code>@query</code>', array('@query' => $query), WATCHDOG_INFO);
      $form['results_wrapper']['results']['#value'] = '<p>'. t('Whoops! No data was available for this query. If you believe there should be data for this query, send the site administrator feedback along with executed query, provided below:') .'</p>';
      $form['results_wrapper']['results']['#value'] .= '<pre>'. $query .'</pre>';
      $form['results_wrapper']['results']['#value'] .= '<p>'. l(t('Permalink'), 'weathermap', array('query' => $query_params)) .'</p>';
    }
  }
  return $form;
}

/**
 * Default submit handler for weathermap form
 */
function ecenter_weathermap_select_form_submit($form, &$form_state) {
  // Do what AHAH helper does on an AJAX call, to make form constructor a 
  // little less crazy
  $form_state['storage'] = $form_state['values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Refresh an Openlayers map
 *
 * This function is necessary because openlayers_render_map uses a small hack
 * and uses json_encode and adds map settings to the page header.  This
 * function adds the map array to the Drupal JS settings array no matter what,
 * so that AJAX/AHAH will work properly.
 *
 * @param $preset
 *  A string preset name.
 * @param $id
 *  Optional ID to use for map.
 */
function ecenter_weathermap_refresh_map($preset, $id = NULL) {
  openlayers_include();
  $preset = openlayers_preset_load($preset);

  // Run map through build process
  $map = openlayers_build_map($preset->data);
  $map['id'] = (!empty($id)) ? $id : $map['id'];

  // Set proper JS settings
  if (empty($map['errors'])) {
    $js = array('openlayers' => array('maps' => array($map['id'] => $map)));
    drupal_add_js($js, 'setting');
  }
}

/**
 * Implementation of hook_openlayers_map_preprocess_alter().
 */
function ecenter_weathermap_openlayers_map_preprocess_alter(&$map) {
  $client = ecenter_weathermap_get_client();
  if ($_REQUEST['ip_select']) {
    $src_ip = $_REQUEST['ip_select']['src_ip_wrapper']['src_ip'];
    $dst_ip = $_REQUEST['ip_select']['dst_ip_wrapper']['dst_ip'];
    $start = $_REQUEST['date_wrapper']['start_date']['date'] .' '. $_REQUEST['date_wrapper']['start_date']['time'];
    $end = $_REQUEST['date_wrapper']['end_date']['date'] .' '. $_REQUEST['date_wrapper']['end_date']['time'];
  }
  else {
    extract($_REQUEST);
  }

  if ($src_ip && $dst_ip && $start && $end) {
    $start_date_adjusted = _ecenter_weathermap_date_to_utc($start);
    $end_date_adjusted = _ecenter_weathermap_date_to_utc($end);

    $data = ecenter_weathermap_get_data($src_ip, $dst_ip, $start_date_adjusted, $end_date_adjusted);

    if ($data) {
      $start = TRUE;
      foreach (array_keys($data) as $trace_id) {
        $map['layers']['ecenter_traceroute_'. $trace_id] = 'ecenter_traceroute_'. $trace_id;
        $map['layer_switcher']['ecenter_traceroute_'. $trace_id] = 'ecenter_traceroute_'. $trace_id;
        $map['layer_styles']['ecenter_traceroute_'. $trace_id] = 'ecenter_default';
        if ($start) {
          $map['layer_activated']['ecenter_traceroute_'. $trace_id] = 'ecenter_traceroute_'. $trace_id;
          $start = FALSE;
        }
      }
    }
  }
  return $map;
}

/**
 * Get the E-Center weather map client
 *
 * @param $status_check
 *  '503', 'message', or FALSE.  What to do if status_check fails.
 */
function ecenter_weathermap_get_client($status_check = '503') {
  static $client = False;
  if (!$client) {
    require_once(dirname(__FILE__) . '/client.php');
    $host = variable_get('ecenter_weathermap_host', 'localhost');
    $port = variable_get('ecenter_weathermap_port', 8000);
    $dir = variable_get('ecenter_weathermap_basedir', '');
    $timeout = variable_get('ecenter_weathermap_timeout', 30);
    $status_timeout = variable_get('ecenter_weathermap_status_timeout', 2);
    $client = new Ecenter_Data_Service_Client($host, $port, $dir, $timeout, $status_timeout);
  }

  // Check status
  if ($status_check && !$client->checkStatus()) {
    $message = t('E-Center web service is not available.');
    watchdog('ecenter', $message, array(), WATCHDOG_ERROR);

    if ($status_check == '503') {
      drupal_set_header('HTTP/1.1 503 Service unavailable');
      // Keep old path for reference, and to allow forms to redirect to it.
      if (!isset($_REQUEST['destination'])) {
        $_REQUEST['destination'] = $_GET['q'];
      }
      print theme('page', $message);
      exit();
    }
    else {
      drupal_set_message($message);
    }
  }
  return $client;
}

/**
 * Get/cache data
 */
function ecenter_weathermap_get_data($src_ip, $dst_ip, $start, $end) {
  $client = ecenter_weathermap_get_client('message');

  $query = http_build_query(array(
    'src_ip' => $src_ip,
    'dst_ip' => $dst_ip,
    'start' => $start,
    'end' => $end,
  ));

  $caching = variable_get('ecenter_weathermap_cache_enabled', 0);

  if ($caching && $result = cache_get($query, 'cache_ecenter_weathermap')) {
    return $result->data;
  }
  else {
    $result = $client->getData($src_ip, $dst_ip, $start, $end);
    if ($result['code'] == 200) {
      $data = ecenter_weathermap_parse_response($result);
      if ($caching) {
        $expires = time() + variable_get('ecenter_weathermap_cache_ttl', 300);
        cache_set($query, $data, 'cache_ecenter_weathermap', $expires);
      }
      return $data;
    }
  }
  return FALSE;
}

/**
 * Sanitize the get array
 */
function ecenter_weathermap_sanitize_get() {
  if (!function_exists('filter_input')) {
    return $_GET;
  }
  $get = array();
  foreach (array_keys($_GET) as $key) {
    $get[$key] = filter_input(INPUT_GET, $key, FILTER_SANITIZE_STRING);
  }
  return $get;
}

/**
 * Traverse an object, turning all members into arrays or preserving their
 * values.
 */
function _ecenter_weathermap_object_to_array($obj) {
  if (is_object($obj)) {
    $obj = get_object_vars($obj);
  }
  foreach ($obj as $k => $v) {
    if (is_object($v) || is_array($v)) {
      $obj[$k] = _ecenter_weathermap_object_to_array($v);
    }
    else {
      $obj[$k] = $v;
    }
  }
  return $obj;
}

/**
 * Return allowed data types
 */
function _ecenter_weathermap_get_data_types() {
  return array('snmp', 'pinger', 'owamp', 'bwctl');
}

/**
 * Parse data
 *
 * Take the data response and turn it into a format more appropriate for
 * visualization.  Specificially, instead of treating the traceroute as just
 * one more type of data, we build an array around it.
 *
 * @param $response
 *  A response object from the E-center webservice.
 */
function ecenter_weathermap_parse_response($response) {
  static $queries = array();

  if (empty($queries[$response->query])) {
    $data = _ecenter_weathermap_object_to_array($response['response']);

    // Pull out traceroutes and sort: we use them to stitch together our
    // data structure
    $traceroutes = $data['traceroute'];
    krsort($traceroutes);
    unset($data['traceroute']);

    // Loop over each traceroute
    $parsed = array();

    foreach ($traceroutes as $trace_id => $traceroute) {

      $parsed[$trace_id] = array();

      foreach ($traceroute as $hop) {
        $hop_data = array();

        // Geolocate IP if no geo data available
        if (!$hop['longitude'] || !$hop['latitude']) {
          $geo = geoip_city($hop['hop_ip']);
          $hop['longitude'] = $geo->longitude;
          $hop['latitude'] = $geo->latitude;
          $hop['geolocated'] = TRUE;
        }

        // Pull in data for hop
        // @TODO -- Make this more efficient -- looping not really required...
        foreach ($data as $type => $values) {
          $hop_data[$type] = $values[$hop['hop_id']];
        }

        $parsed[$trace_id][] = array(
          'hop' => $hop,
          'data' => $hop_data,
        );
      }
    }
    $queries[$response->query] = $parsed;
  }
  return $queries[$response->query];
}

/**
 * Implementation of hook_ctools_plugin_api().
 * Required to provide layers
 */
function ecenter_weathermap_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_layers':
      case 'openlayers_styles':
      case 'openlayers_presets':
        return array('version' => 1);
    }
  }
}

/**
 * Implementation of hook_openlayers_presets().
 */
function ecenter_weathermap_openlayers_presets() {
  $items = array();
  $openlayers_presets = new stdClass;
  $openlayers_presets->disabled = FALSE; /* Edit this to true to make a default openlayers_presets disabled initially */
  $openlayers_presets->api_version = 1;
  $openlayers_presets->name = 'ecenter_weathermap';
  $openlayers_presets->title = 'E-Center Weathermap';
  $openlayers_presets->description = 'E-Center network weathermap';
  $openlayers_presets->data = array(
    'width' => '660px',
    'height' => '360px',
    'image_path' => '',
    'css_path' => '',
    'proxy_host' => '',
    'hide_empty_map' => 0,
    'center' => array(
      'initial' => array(
        'centerpoint' => '-97.892187496064, 38.822590974865',
        'zoom' => '4',
      ),
      'restrict' => array(
        'restrictextent' => 0,
        'restrictedExtent' => '',
      ),
    ),
    'behaviors' => array(
      'ecenter_weathermap_behavior_dynamicload' => array(),
      'openlayers_behavior_tooltip' => array(
        'layers' => array(),
      ),
      'openlayers_behavior_fullscreen' => array(
        'activated' => 0,
      ),
      //'openlayers_behavior_keyboarddefaults' => array(),
      'openlayers_behavior_layerswitcher' => array(),
      'openlayers_behavior_navigation' => array(
        'zoomWheelEnabled' => 0,
      ),
      'openlayers_behavior_panzoombar' => array(),
      /*'openlayers_plus_behavior_blockswitcher' => array(
        'map' => array(
          'enabled' => 1,
          'open' => 1,
          'overlay_style' => 'radio',
          'position' => 'ne',
        ),
      ),*/
    ),
    'default_layer' => 'osm_mapnik',
    'layers' => array(
      'osm_mapnik' => 'osm_mapnik',
      //'google_satellite' => 'google_satellite',
      'google_hybrid' => 'google_hybrid',
      'google_normal' => 'google_normal',
      //'google_physical' => 'google_physical',
      //'virtualearth_street' => 'virtualearth_street',
      //'virtualearth_satellite' => 'virtualearth_satellite',
      //'virtualearth_hybrid' => 'virtualearth_hybrid',
    ),
    'layer_styles' => array(
      'ecenter_map_test_display_openlayers_1' => 'ecenter_default',
    ),
    'layer_activated' => array(),
    'layer_switcher' => array(),
    'projection' => '900913',
    'displayProjection' => '4326',
    'styles' => array(
      'default' => 'ecenter_default',
      'select' => 'ecenter_selected',
      'temporary' => 'default',
    ),
    'preset_name' => 'ecenter_weathermap',
  );
  $items["ecenter_weathermap"] = $openlayers_presets;
  return $items;
}

/**
 * Implementation of hook_openlayers_styles().
 */
function ecenter_weathermap_openlayers_styles() {
  $styles = array();

  // Default
  $style = new stdclass();
  $style->api_version = 1;
  $style->name = 'ecenter_default';
  $style->title = t('E-center style');
  $style->description = t('Basic e-center style.');
  $style->data = array(
    'pointRadius' => 6,
    'fillColor' => '#ffffff',
    'strokeColor' => '#0000aa',
    'strokeWidth' => 2,
    'fillOpacity' => 1,
  );
  $styles[$style->name] = $style;

  // Selected
  $style = new stdclass();
  $style->api_version = 1;
  $style->name = 'ecenter_selected';
  $style->title = t('E-center selected style');
  $style->description = t('Basic e-center style.');
  $style->data = array(
    'pointRadius' => 6,
    'fillColor' => '#ffffff',
    'strokeColor' => '#777777',
    'strokeWidth' => 2,
    'fillOpacity' => 1,
  );
  $styles[$style->name] = $style;

  return $styles;
}

/**
 * Implementation of hook_openlayers_behaviors().
 */
function ecenter_weathermap_openlayers_behaviors() {
  return array(
    'ecenter_weathermap_behavior_dynamicload' => array(
      'title' => t('E-Center Weathermap: Dynamic Load'),
      'behavior' => array(
        'path' => drupal_get_path('module', 'ecenter_weathermap') .'/openlayers',
        'file' => 'ecenter_weathermap_behavior_dynamicload.inc',
        'class' => 'ecenter_weathermap_behavior_dynamicload',
        'parent' => 'openlayers_behavior',
      ),
    ),
  );
}

/**
 * Implementation of hook_openlayers_layers().
 */
function ecenter_weathermap_openlayers_layers() {
  $layers = array();
  // Provide dynamic layers for map on
  if ((arg(0) == 'weathermap' && !arg(1)) || ($_REQUEST['form_id'] == 'ecenter_weathermap_select_form')) {
    $layers = ecenter_weathermap_map_layers();
  }
  return $layers;
}

/**
 * Generate dynamic raw layer data for E-center weathermap
 */
function ecenter_weathermap_map_layers() {
  $layers = array();
  $client = ecenter_weathermap_get_client('message');

  if ($_REQUEST['form_id'] == 'ecenter_weathermap_select_form') {
    $src_ip = $_REQUEST['ip_select']['src_ip_wrapper']['src_ip'];
    $dst_ip = $_REQUEST['ip_select']['dst_ip_wrapper']['dst_ip'];
    $start = $_REQUEST['date_wrapper']['start_date']['date'] .' '. $_REQUEST['date_wrapper']['start_date']['time'];
    $end = $_REQUEST['date_wrapper']['end_date']['date'] .' '. $_REQUEST['date_wrapper']['end_date']['time'];
  }
  else {
    extract($_REQUEST);
  }

  if ($src_ip && $dst_ip && $start && $end) {

    $start_date_adjusted = _ecenter_weathermap_date_to_utc($start);
    $end_date_adjusted = _ecenter_weathermap_date_to_utc($end);

    $data = ecenter_weathermap_get_data($src_ip, $dst_ip, $start_date_adjusted, $end_date_adjusted);

    if ($data) {
      foreach ($data as $trace_id => $traceroute) {
        // Initialize some counters, etc
        $old_hop = NULL;
        $count = count($traceroute);
        $i = 0;

        // Create layer object
        $layer = new stdClass();
        $layer->api_version = 1;
        $layer->name = 'ecenter_traceroute_'. $trace_id;
        $layer->title = t('Traceroute @id', array('@id' => $trace_id));
        $layer->description = '';
        $layer->data = array(
          'layer_type' => 'openlayers_layer_type_raw',
          'projection' => array('900913'),
        );

        $features = array();
        foreach ($traceroute as $hop_data) {
          $hop = $hop_data['hop'];
          if ($hop['longitude'] && $hop['latitude']) {
            if ($old_hop && $i < $count) {
              $features[] = array(
                'wkt' => "LINESTRING({$old_hop['longitude']} {$old_hop['latitude']}, {$hop['longitude']} {$hop['latitude']})",
                'projection' => "4326",
                'attributes' => array(
                  'name' => t('Stub for link data'),
                  'description' => t('Useful information about link/delay<br /> (as measured by traceroute, pingER, owamp)<br /> could go here'),
                ),
                'style' => array(
                  'strokeWidth' => 4,
                  'strokeColor' => '#777777',
                ),
              );
            }
            $features[] = array(
              'wkt' => "POINT({$hop['longitude']} {$hop['latitude']})",
              'projection' => "4326",
              'attributes' => array(
                'name' => $hop['hub'] .' ('. $hop['hop_ip'] .')',
                'description' => 'Hop ID: '. $hop['hop_id'],
              ),
              'style' => array(
                'pointRadius' => 5,
                'fillColor' => '#ffffff',
                'strokeColor' => '#0000aa',
                'strokeWidth' => 2,
                'fillOpacity' => 1,
              ),
            );
            $old_hop = $hop;
          }
          $i += 1;
        }
        $layer->data['features'] = $features;
        $layers[$layer->name] = $layer;
      }
    }
  }
  return $layers;
}

/**
 * Implementation of hook_openlayers_map_alter().
 */
function ecenter_weathermap_openlayers_map_alter(&$map) {
  if ($map['preset_name'] == 'ecenter_weathermap') {
    foreach ($map['layers'] as $name => $layer) {
      if ($layer['baselayer'] == TRUE) {
        $map['layers'][$name]['numZoomLevels'] = 8;
      }
    }
  }
}

/**
 * Adjust local date to UTC
 *
 * @param $date
 *  A date string
 * @param $format
 *  Format to use for return value.
 * @return string
 *  Formatted, converted date
 */
function _ecenter_weathermap_date_to_utc($date, $format = 'Y-m-d H:i:s') {
  $tz = date_default_timezone_name(TRUE);
  $adjusted = date_create($date, timezone_open($tz));
  date_timezone_set($adjusted, timezone_open('UTC'));
  return date_format($adjusted, $format);
}
