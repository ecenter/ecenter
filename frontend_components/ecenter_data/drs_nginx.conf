# Create separate user just for webserver (if not automatically created)
user apache;

# Set worker_processes to 1 (or # of cores) minimum and 2x-3x cores maximum.
# Max Clients = worker_processes * (worker_connections/4)
worker_processes  8;
error_log  /var/log/nginx/drs_error.log;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;

    access_log    /var/log/nginx/access.log;

    default_type       application/octet-stream;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  300;
    tcp_nodelay        on;

    # Turn off compression if there is a caching server in front of Nginx.
    # Play around with optimizing buffer size and ect. based on your needs.
    gzip  on;
    gzip_min_length   1100;
    #gzip_buffers     4 8k;
    #gzip_types       text/plain;
    #gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    # Include other configs..
    include /etc/nginx/conf.d/*.conf;

  upstream drs_backend {
      server 127.0.0.1:10500;
      server 127.0.0.1:10501;
      server 127.0.0.1:10502;
      server 127.0.0.1:10503;
  }

  server {
     # Port 80 is implied but with a caching server in front, you need a
     # different port. 
     listen        8055;
     server_name   ecenter.fnal.gov;

     # It is recommended you create a separate access log for the server.
     access_log  /var/log/nginx/drs_server.log;
     location / {
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass       http://drs_backend;
     }
     # Note: If you add a frontend caching server, the above section will
     # have to change completely 
     # along with serveral other things.
  }

}
