[% IF !preserve %]
drop database [% dbname %];
[% END  %]
create database  [% preserve %]  [% dbname %];
grant all privileges on  [% dbname %].* to  [% user %]@localhost identified by  '[% pass %]';
grant select on  [% dbname %].* to www@localhost identified by 'www_user';
flush privileges;
use  [% dbname %];
--
--  topology hub ( something with coordinates, name )
--
-- 
CREATE TABLE [% preserve %]  hub (
hub  varchar(32) NOT NULL,
hub_name  varchar(32) NOT NULL,
description varchar(100)   NOT NULL,
longitude float NULL,
latitude float NULL,
PRIMARY KEY  (hub)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='topology hub (esnet)';
--
--  topology layer2 info
--
-- 
CREATE TABLE  [% preserve %]  l2_port (
l2_urn varchar(512)   NOT NULL,
description varchar(100)   NOT NULL,
capacity   bigint  unsigned   NOT NULL,
hub varchar(32) NOT NULL,
PRIMARY KEY  (l2_urn ),
FOREIGN KEY ( hub ) REFERENCES hub ( hub ) on DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='ps-ps topology layer2 info';
--
--  topology layer2 linkage
--
-- 
CREATE TABLE  [% preserve %]  l2_link (
l2_link  bigint  unsigned AUTO_INCREMENT  NOT NULL,   
l2_src_urn varchar(512)   NOT NULL,   
l2_dst_urn varchar(512)   NOT NULL,   
PRIMARY KEY  (l2_link),
FOREIGN KEY ( l2_src_urn ) REFERENCES l2_port ( l2_urn)  on DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY ( l2_dst_urn ) REFERENCES l2_port ( l2_urn )  on DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='ps-ps topology layer2  links';
--
--   nodes - all of them
--   ip_addr supports   ipv4 and ipv6 addresses in binary form
--    
--    it holds topology info as well via layer2 id ( as http://ogf.org/schema/network/topology/base/20070828/ schema describes)
--
--    it set as INET6_PTON('131.225.1.1') and essentially a 16 byte representation of the IP
--    it allows indexing and netblock search, to get original IP address - INET6_NTOP(ip_addr)
--    to see dotted form of ipv4 or ipv6 - select ip_noted
--    
-- 
CREATE TABLE  [% preserve %]  node (
 ip_addr  varbinary(16)  NOT NULL,
 nodename  varchar(255)  NULL,
 ip_noted  varchar(40)  NOT NULL,
 netmask  smallint(3) NOT NULL default '24',
 PRIMARY KEY  (ip_addr),
 KEY (nodename),
 KEY (ip_noted),
 KEY (netmask)
)  ENGINE=InnoDB CHARSET=latin1  COMMENT='nodes';
--
--  topology layer3 mapping to layer2, 
--  use netmask from the node table to get all addresses from the block
-- created and updated are here to provide versioning - the same ip_addr maps to l2_urn in some period of time
-- 
CREATE TABLE  [% preserve %]  l2_l3_map (
l2_l3_map  bigint  unsigned AUTO_INCREMENT  NOT NULL,
ip_addr   varbinary(16)  NOT NULL,
l2_urn    varchar(512)    NOT NULL,
created  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated  TIMESTAMP NOT NULL DEFAULT 0,
PRIMARY KEY  (l2_l3_map),
UNIQUE KEY ip_l2_time (ip_addr, l2_urn, updated),
FOREIGN KEY (l2_urn) REFERENCES l2_port ( l2_urn )  on DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY ( ip_addr ) REFERENCES node ( ip_addr )  on DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='ps-ps topology layer2-layer3 mapping';
--
--    list of keywords, stores most recent regexp used to obtain that keyword as well
-- 
CREATE TABLE  [% preserve %]   keyword (
 keyword  varchar(255) NOT NULL,
 pattern  varchar(255)  NULL,
 PRIMARY KEY  (keyword)
 )  ENGINE=InnoDB CHARSET=latin1  COMMENT='project keywords';
--
--  operational table for the most recent status of the service
--  all services are here
-- 
CREATE TABLE   [% preserve %]   service (
 service varchar(255)NOT NULL,
 name varchar(255) NOT NULL,
 ip_addr varbinary(16) NOT NULL,
 comments  varchar(255) NULL,
 is_alive boolean,
 created  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
 updated  TIMESTAMP NOT NULL DEFAULT 0,
 PRIMARY KEY  (service),
 KEY is_alive (is_alive),
 FOREIGN KEY (ip_addr) REFERENCES  node (ip_addr)
 ) ENGINE=InnoDB CHARSET=latin1 COMMENT='ps-ps services operational table';
--
--    list of eventtypes, metadata will refere to the ref_id here, not the SERVICE !
-- 
CREATE TABLE  [% preserve %]   eventtype  (
 ref_id   bigint  unsigned AUTO_INCREMENT NOT NULL, 
 eventtype  varchar(255)  NULL, 
 service varchar(255)  NOT NULL,
 service_type  varchar(32) NOT NULL DEFAULT 'hLS',
 PRIMARY KEY  (ref_id),
 UNIQUE KEY eventtype_service_type (eventtype, service, service_type), 
 FOREIGN KEY  (service) REFERENCES  service (service)  on DELETE CASCADE ON UPDATE CASCADE
 )  ENGINE=InnoDB CHARSET=latin1 COMMENT='eventtypes - many per service - many services for the md';
--
--  keywords_service for  many - many rel
--  
-- 
CREATE TABLE  [% preserve %]  keywords_service (
ref_id bigint  unsigned AUTO_INCREMENT NOT NULL, 
keyword varchar(255) NOT NULL,
service varchar(255)  NOT NULL, 
PRIMARY KEY  (ref_id),
UNIQUE KEY key_service (keyword, service), 
FOREIGN KEY (keyword) REFERENCES keyword  (keyword) on DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (service) REFERENCES  service (service)  on DELETE CASCADE ON UPDATE CASCADE
)ENGINE=InnoDB CHARSET=latin1  COMMENT='many to many for keywords_services';
--
--  metadata for the service 
--  keeping XML in the subject and parameters but extracting end-to-end data 
--
--   src - source or interface address depending on type of the service
--   dst - destination address
--   direction - for the SNMP metadata - direction of the interface
--   created - updated - to signify active metadata
--    
-- 
CREATE TABLE   [% preserve %]  metadata (
metaid  bigint  unsigned AUTO_INCREMENT NOT NULL,
src_ip  varbinary(16)  NOT NULL,
dst_ip  varbinary(16)  NOT  NULL DEFAULT '0',
direction   enum('in','out') NOT NULL default 'in', 
eventtype_id  bigint  unsigned  NOT NULL,
subject varchar(1023) NOT NULL  DEFAULT '',
parameters varchar(1023) NULL,
created  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
updated  TIMESTAMP NOT NULL DEFAULT 0,
PRIMARY KEY  (metaid),
KEY  (metaid),
UNIQUE KEY md_ips_type (src_ip, dst_ip, eventtype_id),
FOREIGN KEY (eventtype_id) REFERENCES  eventtype(ref_id)  on DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB CHARSET=latin1 COMMENT='ps-ps metaid provided by each service-eventtype';
--
--  NEXT TABLES FOR THE  DATA CACHE
--  we are going to store pinger, owamp, bwctl, snmp data
--  based on source -> destination pairs
--
--
--    pinger data storage, base for shard - each month of data will have own table - pinger_data_201011 for example 
--
-- 
CREATE TABLE   [% preserve %]  pinger_data_[% datestamp %]  (
 pinger_data bigint  unsigned AUTO_INCREMENT NOT NULL, 
 metaid   BIGINT  unsigned   NOT NULL,
 minRtt float,
 meanRtt float,
 medianRtt float,
 maxRtt float,
 timestamp   bigint(12) unsigned NOT NULL,
 minIpd float,
 meanIpd float,
 maxIpd float,
 duplicates smallint unsigned,
 outOfOrder  smallint unsigned,
 clp float,
 iqrIpd float,
 lossPercent float,
 PRIMARY KEY (pinger_data), 
 KEY (timestamp),
 UNIQUE KEY meta_time (metaid, timestamp),
 FOREIGN KEY (metaid) REFERENCES metadata(metaid)  on DELETE CASCADE ON UPDATE CASCADE
 ) ENGINE=InnoDB CHARSET=latin1 COMMENT='ps-ps  pinger data  cache';
--
--    BWCTL data  storage - base for shard - each month of data will have own table - bwctl_data_201011 for example 
--
--
-- 
CREATE TABLE   [% preserve %] bwctl_data_[% datestamp %] (
   bwctl_data  bigint  unsigned AUTO_INCREMENT NOT NULL, 
   metaid    BIGINT  unsigned NOT NULL,
   timestamp   bigint(12) unsigned NOT NULL,
   throughput  float,
   PRIMARY KEY  (bwctl_data),
   KEY (timestamp), 
   UNIQUE KEY meta_time (metaid, timestamp),
   FOREIGN KEY (metaid) REFERENCES metadata(metaid)  on DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='ps-ps  bwctl data  cache';
--
--            OWAMP data  storage  - base for shard - each month of data will have own table - owamp_data_201011 for example 
--
-- 
CREATE TABLE   [% preserve %] owamp_data_[% datestamp %] (
   owamp_data  bigint unsigned AUTO_INCREMENT NOT NULL, 
   metaid   BIGINT  unsigned  NOT NULL,
   timestamp  bigint(12) unsigned NOT NULL,
   min_delay float,
   max_delay float,
   sent   smallint unsigned,
   loss   smallint unsigned,
   duplicates   smallint unsigned,
   PRIMARY KEY  (owamp_data),
   KEY  (timestamp),
   UNIQUE KEY meta_time (metaid, timestamp),
   FOREIGN KEY (metaid) REFERENCES metadata(metaid)  on DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='ps-ps  owamp  data  cache';
--
--            SNMP data  storage - base for shard - each month of data will have own table - snmp_data_201011 for example 
--          
-- 
CREATE TABLE   [% preserve %]  snmp_data_[% datestamp %] (
   snmp_data  bigint unsigned AUTO_INCREMENT NOT NULL, 
   metaid   BIGINT  unsigned  NOT NULL,
   timestamp  bigint(12) unsigned NOT NULL,
   utilization float,
   errors smallint unsigned,
   drops smallint unsigned,
   PRIMARY KEY  (snmp_data),
   KEY  (timestamp),
   UNIQUE KEY meta_time (metaid, timestamp),
   FOREIGN KEY (metaid) REFERENCES metadata(metaid)  on DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='ps-ps snmp data  cache';
--
--  per hop info - base for shard - each month of data will have own table - hop_data_201011 for example 
--
--
-- 
CREATE TABLE   [% preserve %] hop_data_[% datestamp %] (
hop_id  bigint  unsigned AUTO_INCREMENT  NOT NULL,
metaid bigint unsigned NOT NULL,
hop_ip  varbinary(16) NOT NULL,
hop_num tinyint(3) NOT NULL DEFAULT '1', 
hop_delay  float,
timestamp bigint(12) unsigned NOT NULL, 
PRIMARY KEY (hop_id),
UNIQUE KEY meta_time (metaid, hop_ip, timestamp),
FOREIGN KEY (metaid) REFERENCES metadata(metaid)  on DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (hop_ip) REFERENCES  node(ip_addr)  on DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='ps-ps traceroute hops';
