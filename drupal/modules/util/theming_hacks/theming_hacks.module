<?php

/**
 * @file theming_hacks.module
 *
 * This is a collection of utilities and hacks that extend the the Drupal 
 * theming system in pleasing ways and provide a few other handy tools.
 * 
 * - Provide a hack to the theming system to provide autoregistration of tpl
 *   files that override *any* theme function without further modification,
 *   to cut down on boilerplate code.
 *
 * - Auto-detect and override CSS files without registration in a theme's
 *   .info file.  This is a simple convenience, but it is fast and makes
 *   CSS feel consistent with tpl replacement.
 * 
 * - Provide blocks for common theme configuration options.  This grant end-
 *   users more flexibility in customizing their theme, because their logo,
 *   slogan, etc, are now mobile and configurable via the common blocks UI.
 *
 * - Add "Save and Continue Editing" and "Save and Add Another" buttons to node
 *   editing and creation forms.
 *
 * - Add a site relative link filter for use input formats (based on code by
 *   Barry Jaspan).
 *
 * It is critical that this module fire late in Drupal execution stack. The 
 * module installs with a default weight of '9999' which should be sufficient 
 * in most instances.
 */

/**
 * Implementation of hook_menu().
 */
function theming_hacks_menu() {
  $items = array();
  $items['admin/settings/theming-hacks'] = array(
    'title' => 'Theming hacks settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('theming_hacks_admin_form'),
    'access arguments' => array('administer theming hacks'),
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function theming_hacks_perm() {
  return array('administer theming hacks');
}

/**
 * Implementation of hook_theme().
 *
 * By passing in $existing by reference, we may alter it during the theme
 * registry rebuild process.  
 *
 * On a theme registry rebuild, this function peeks in the theme path for
 * a template file with the same name as the theme function (i.e. 
 * if mymodule_themefn is called, we look for mymodule-themefn.tpl.php), 
 * and forces the template found to register for that theme call, no matter
 * what Drupal thinks.
 */
function theming_hacks_theme(&$existing, $type, $theme, $path) {
  if (variable_get('theming_hacks_override_theme_functions', 1)) {
    // Loop over each and every theme call
    foreach ($existing as $name=>$opts) {
      $tpl = str_replace('_', '-', $name);

      if (file_scan_directory(path_to_theme(), $tpl .'.tpl.php')) {
        $existing[$name]['theme paths'][] = path_to_theme(); 
        $existing[$name]['template'] = $tpl;
      }
      else {
        foreach ($GLOBALS['base_theme_info'] as $base_theme) {
          $info_path = explode('/', $base_theme->filename);
          array_pop($info_path);
          $base_theme_path = implode('/', $info_path);

          if (file_scan_directory($base_theme_path, $tpl .'.tpl.php')) {
            $existing[$name]['theme paths'][] = $base_theme_path;
            $existing[$name]['template'] = $tpl;
          }
        }
      }
    }
  }
  return array(
    'theming_hacks_site_name' => array('arguments' => array('site_name' => NULL)),
    'theming_hacks_local_tasks' => array('arguments' => array('tasks' => NULL, 'level' => 0)), 
  );
}

/**
 * Implementation of hook_block().
 */
function theming_hacks_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      'site_name' => array(
        'info' => 'Theming Hacks: Site Name',
        'cache' => BLOCK_CACHE_GLOBAL,
      ),
      'site_slogan' => array(
        'info' => 'Theming Hacks: Site Slogan',
        'cache' => BLOCK_CACHE_GLOBAL,
      ),
      'site_mission' => array(
        'info' => 'Theming Hacks: Site Mission',
        'cache' => BLOCK_CACHE_GLOBAL,
      ),
      'site_footer' => array(
        'info' => 'Theming Hacks: Site Footer',
        'cache' => BLOCK_CACHE_GLOBAL,
      ),
      'primary_links' => array(
        'info' => 'Theming Hacks: Primary Links',
        'cache' => BLOCK_CACHE_PER_PAGE,
      ),
      'secondary_links' => array(
        'info' => 'Theming Hacks: Secondary Links',
        'cache' => BLOCK_CACHE_PER_PAGE,
      ),
      'tertiary_links' => array(
        'info' => 'Theming Hacks: Tertiary Links',
        'cache' => BLOCK_CACHE_PER_PAGE,
      ),
      'tertiary_links_expanded' => array(
        'info' => 'Theming Hacks: Tertiary Links Expanded (includes children of current branch)',
        'cache' => BLOCK_CACHE_PER_PAGE,
      ),
      'local_tasks' => array(
        'info' => 'Theming hacks:  Local tasks (the entire local task tree)',
        'cache' => BLOCK_NO_CACHE,
      ),
    );
  }
  elseif ($op == 'configure') {
    $form = array();
    $form['title'] = array();
    $form['site_information_link'] = array(
      '#type' => 'item',
      '#description' => 'You may edit the content of this block on the ' . l('Site Information settings page', 'admin/settings/site-information', array('query' => array('destination' => 'admin/build/block/configure/theming_hacks/' . $delta))) . '.',
    );
    return $form;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 'site_name':
        return array(
          'subject' => '',
          'content' => theme('theming_hacks_site_name', variable_get($delta, '')),
        );
        break;
      case 'site_slogan':
      case 'site_mission':
      case 'site_footer':
        return array(
          'subject' => '',
          'content' => check_markup(variable_get($delta, '')),
        );
        break;
      case 'primary_links':
        $menu = menu_navigation_links('primary-links', 0);
        if (module_exists('context')) {
          $menu = context_menu_set_active($menu);
        }
        $links = trim(theme('links', $menu, array('class' => 'links primary-links')));
        if (!empty($links)) {
          return array(
            'subject' => '',
            'content' => $links,
          );
        }
        break;
      case 'secondary_links':
        $menu = menu_navigation_links('primary-links', 1);
        if (module_exists('context')) {
          $menu = context_menu_set_active($menu);
        }
        $links = trim(theme('links', $menu, array('class' => 'links secondary-links')));
        if (!empty($links)) {
          return array(
            'subject' => _theming_hacks_active_menu_item('primary-links', 1),
            'content' => $links,
          );
        }
        break;
      case 'tertiary_links':
        $menu = menu_navigation_links('primary-links', 2);
        if (module_exists('context')) {
          $menu = context_menu_set_active($menu);
        }
        $links = trim(theme('links', $menu, array('class' => 'links tertiary-links')));
        if (!empty($links)) {
          return array(
            'subject' => _theming_hacks_active_menu_item('primary-links', 2),
            'content' => $links,
          );
        }
        break;
      case 'tertiary_links_expanded':
        $links = _theming_hacks_active_children('primary-links', 2);
        if (!empty($links)) {
          return array(
            'subject' => _theming_hacks_active_menu_item('primary-links', 2),
            'content' => $links,
          );
        }
        break;
      case 'local_tasks':
        $tasks = _theming_hacks_menu_local_tasks();
        if (!empty($tasks)) {
          return array(
            'subject' => t('Page actions'),
            'content' => theme('theming_hacks_local_tasks', $tasks),
          );
        }
        break;
    }
  }
}

/** 
 * Implementation of hook_form_alter().
 */
function theming_hacks_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    $form['buttons']['submit']['#value'] = t('Save and view');
    $form['buttons']['save_and_continue'] = array(
      '#type' => 'submit',
      '#value' => t('Save and continue editing'),
      '#submit' => array('theming_hacks_node_form_submit'),
    );
    $form['buttons']['save_and_add'] = array(
      '#type' => 'submit',
      '#value' => t('Save and add another @type', array('@type' => $form['type']['#value'])),
      '#submit' => array('theming_hacks_node_form_submit'),
    );
  }
}

/** 
 * Handle redirection when submitting node forms -- based on node_form_submit.
 */
function theming_hacks_node_form_submit($form, &$form_state) {
  global $user;

  $node = node_form_submit_build_node($form, $form_state);
  $insert = empty($node->nid);
  node_save($node);
  $node_link = l(t('view'), 'node/'. $node->nid);
  $watchdog_args = array('@type' => $node->type, '%title' => $node->title);
  $t_args = array('@type' => node_get_types('name', $node), '%title' => $node->title);

  if ($insert) {
    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been updated.', $t_args));
  }
  if ($node->nid) {
    unset($form_state['rebuild']);
    $form_state['nid'] = $node->nid;

    switch ($form_state['clicked_button']['#id']) {
      case 'edit-save-and-continue':
        $form_state['redirect'] = 'node/'. $node->nid .'/edit';
        break;
      case 'edit-save-and-add':
        $form_state['redirect'] = 'node/add/'. $form['type']['#value'];
        break;
      default:
        $form_state['redirect'] = 'node/'. $node->nid;
    }
  }
  else {
    // In the unlikely case something went wrong on save, the node will be
    // rebuilt and node form redisplayed the same way as in preview.
    drupal_set_message(t('The post could not be saved.'), 'error');
  }
}

/** 
 * Settings form.
 */
function theming_hacks_admin_form() {
  $form = array();
  $form['theming_hacks_override_theme_functions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Override theme functions if template exists?'),
    '#description' => t('
      If a template file exists in the active theme with the same name as a 
      theme function, use the file instead of the theme function, even if the
      active theme does not explicitly override the function in 
      <em>template.php</em>.
    '),
    '#default_value' => variable_get('theming_hacks_override_theme_functions', 1),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_filter_tips().
 */
function theming_hacks_filter_tips($delta, $format, $long) {
  return theming_hacks_filter('tip', $delta, $format, $long);
}

/**
 * Implementation of hook_filter().
 */
function theming_hacks_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
  case 'list':
    return array(t('Site-relative links filter'));
   
  case 'no cache':
    return 0;
   
  case 'description':
  case 'tip':
    return t('Site-relative links such as &lt;a href="node/123"&gt; will work correctly.');
   
  case 'process':
    $text =
      preg_replace_callback('@(<(?:a|img)\s*[^>]*(?:href|src)=")'.
    '((?:[^/#][-a-z0-9_./ ]*)?)'.
    '("[^>]*>)@i',
    create_function
    ('$m',
     'return $m[1].url($m[2]).$m[3];'),
    $text);
    return $text;
   
  case 'settings':
    return;
   
  default:
    return $text;
  }
}

/**
 * Implementation of template_preprocess_page().
 *
 * Overrides CSS.
 */
function theming_hacks_preprocess_page(&$variables, $hook) {
  $variables['styles'] = theming_hacks_get_css();
}

/**
 * Theme site name.
 */
function theme_theming_hacks_site_name($site_name) {
  return '<h1 id="site-name">'. l($site_name, '<front>') .'</h1>';
}

/**
 * This function overrides the default Drupal CSS setting behavior.  If a CSS
 * file of the same name as a module or system CSS file exists in the current
 * theme under the 'css' folder, then we use it *instead* of the 
 * Drupal/module-provided CSS file.  
 *
 * If the CSS file does not exist and the current theme is a subtheme, we
 * search up the base theme tree to see if it exists in a parent theme.
 *
 * Becase this can be accomplished by registering CSS files with the same names as
 * the module-provided CSS files in your .info file, this is only for convenience.
 *
 * @return 
 *   Rendered Drupal CSS
 */
function theming_hacks_get_css() {
  global $base_theme_info, $theme_info;

  $css = array();
  $old_css = drupal_add_css();

  $theme_info_path = explode('/', $theme_info->filename);
  array_pop($theme_info_path);
  $path_to_theme = implode('/', $theme_info_path);

  foreach ($old_css as $section=>$type) {
    foreach ($type as $type_name=>$css_file) {
      foreach ($css_file as $path=>$enabled) {
        $file = array_pop(explode('/', $path));  

        // Find override in current theme
        $override = file_scan_directory($path_to_theme .'/css', '^'. $file .'$', array('.', '..', 'CVS'));

        // If no override exists in current theme, look at parent themes
        if (empty($override) && !empty($GLOBALS['base_theme_info'])) {
          foreach ($base_theme_info as $base_theme) {
            $info_path = explode('/', $base_theme->filename);
            array_pop($info_path);
            $base_theme_path = implode('/', $info_path);
            if ($new_override = file_scan_directory($base_theme_path .'/css', $file .'$', array('.', '..', 'CVS'))) {
              $override = $new_override;
            }
          }
        }
        $override = array_pop($override);

        if (!empty($override)) {
          $css[$section][$type_name][$override->filename] = $enabled;
        }
        else {
          $css[$section][$type_name][$path] = $enabled;
        }
      }
    }
  }
  return drupal_get_css($css);
}

/**
 * Get the entire menu tree of a specific Drupal menu underneath a
 * specified level.
 */
function _theming_hacks_active_children($menu_name, $level = 0) {
  // Don't even bother querying the menu table if no menu is specified.
  if (empty($menu_name)) {
    return array();
  }

  // Get the menu hierarchy for the current page.
  $tree = menu_tree_page_data($menu_name);

  // Go down the active trail until the right level is reached.
  while ($level-- > 0 && $tree) {
    // Loop through the current level's items until we find one that is in trail.
    while ($item = array_shift($tree)) {
      if ($item['link']['in_active_trail']) {
        // If the item is in the active trail, we continue in the subtree.
        $tree = empty($item['below']) ? array() : $item['below'];
        break;
      }
    }
  }

  return menu_tree_output($tree);
}

/**
 * Get an arbitrary item in the active menu trail as a link.
 *
 * @return
 *   The menu item that is the PARENT of the specified level.
 */
function _theming_hacks_active_menu_item($menu_name, $level) {
  static $active_trail;
  
  if (!isset($active_trail[$menu_name])) {
    // Get the menu hierarchy for the current page.
    $tree = menu_tree_page_data($menu_name);

    $active_trail[$menu_name] = array();
    while ($tree && $item = array_pop($tree)) {
      if ($item['link']['in_active_trail']) {
        $active_trail[$menu_name][] = $item['link'];
        $tree = $item['below'];
      }
    }
  }
  
  if ($active_trail[$menu_name][$level - 1]) {
    return l($active_trail[$menu_name][$level - 1]['title'], $active_trail[$menu_name][$level - 1]['href']);
  }
}

/**
 * Modified version of menu_local_tasks().
 *
 * Get whole local task tree
 */
function _theming_hacks_menu_local_tasks() {
  static $tabs;
  static $root_path;

  if (!isset($tabs)) {
    $tabs = array();

    $router_item = menu_get_item();
    if (!$router_item || !$router_item['access']) {
      return '';
    }
    // Get all tabs and the root page.
    $result = db_query("SELECT * FROM {menu_router} WHERE tab_root = '%s' ORDER BY weight, title", $router_item['tab_root']);
    $map = arg();
    $children = array();
    $tasks = array();
    $root_path = $router_item['path'];

    while ($item = db_fetch_array($result)) {
      _menu_translate($item, $map, TRUE);
      if ($item['tab_parent']) {
        // All tabs, but not the root page.
        $children[$item['tab_parent']][$item['path']] = $item;
      }
      // Store the translated item for later use.
      $tasks[$item['path']] = $item;
    }

    // Find all tabs below the current path.
    $path = $router_item['path'];
    // Tab parenting may skip levels, so the number of parts in the path may not
    // equal the depth. Thus we use the $depth counter (offset by 1000 for ksort).
    $depth = 1001;
    while (isset($children[$path])) {
      $tabs_current = array();
      $next_path = '';
      $count = 0;
      foreach ($children[$path] as $item) {
        if ($item['access']) {
          $count++;
          // The default task is always active.
          if ($item['type'] == MENU_DEFAULT_LOCAL_TASK) {
            // Find the first parent which is not a default local task.
            for ($p = $item['tab_parent']; $tasks[$p]['type'] == MENU_DEFAULT_LOCAL_TASK; $p = $tasks[$p]['tab_parent']);
            $link = array('href' => $tasks[$p]['href']) + $item;
            $tabs_current[] = array(
              'link' => module_invoke_all('theming_hacks_task_alter', $link),
              'active' => TRUE,
            );
            $next_path = $item['path'];
          }
          else {
            $tabs_current[] = array(
              'link' => module_invoke_all('theming_hacks_task_alter', $item),
              'active' => FALSE,
            );
          }
        }
      }
      $path = $next_path;
      $tabs[$depth]['count'] = $count;
      $tabs[$depth]['tabs'] = $tabs_current;
      $depth++;
    }

    // Find all tabs at the same level or above the current one.
    $parent = $router_item['tab_parent'];
    $path = $router_item['path'];
    $current = $router_item;
    $depth = 1000;
    while (isset($children[$parent])) {
      $tabs_current = array();
      $next_path = '';
      $next_parent = '';
      $count = 0;
      foreach ($children[$parent] as $item) {
        if ($item['access']) {
          $count++;
          if ($item['type'] == MENU_DEFAULT_LOCAL_TASK) {
            // Find the first parent which is not a default local task.
            for ($p = $item['tab_parent']; $tasks[$p]['type'] == MENU_DEFAULT_LOCAL_TASK; $p = $tasks[$p]['tab_parent']);
            $link = array('href' => $tasks[$p]['href']) + $item;
            if ($item['path'] == $router_item['path']) {
              $root_path = $tasks[$p]['path'];
            }
          }
          else {
            $link = $item;
          }
          // We check for the active tab.
          if ($item['path'] == $path) {
            $tabs_current[] = array(
              'link' => module_invoke_all('theming_hacks_task_alter', $link),
              'active' => TRUE,
            );
            $tab_active = TRUE;
            $next_path = $item['tab_parent'];
            if (isset($tasks[$next_path])) {
              $next_parent = $tasks[$next_path]['tab_parent'];
            }
          }
          else {
            $tabs_current[] = array(
              'link' => module_invoke_all('theming_hacks_task_alter', $link),
              'active' => FALSE,
            );
          }
        }
      }
      $path = $next_path;
      $parent = $next_parent;
      $tabs[$depth]['count'] = $count;
      $tabs[$depth]['tabs'] = $tabs_current;
      $depth--;
    }
    // Sort by depth.
    ksort($tabs);
    // Remove the depth, we are interested only in their relative placement.
    $tabs = array_values($tabs);
  }

  return $tabs;
}

/** 
 * Implementation of hook_theming_hacks_task_alter().
 */
function theming_hacks_theming_hacks_task_alter($link) {
  return $link;
}

/**
 * Theme local tasks in block.
 */
function theme_theming_hacks_local_tasks($tasks, $level=0) {
  $output = '<ul>';
  foreach ($tasks[$level]['tabs'] as $tab) {
    if (!empty($tab['link']['href'])) {
      $next_level = $level + 1;
      $class = ($tab['active']) ? ' class="active"' : '';
      $output .= '<li'. $class .'>';
      $output .= theme('menu_item_link', $tab['link']);
      if ($tab['active'] && !empty($tasks[$next_level])) {
        $output .= '<ul>'. theme('theming_hacks_local_tasks', $tasks, $next_level) .'</ul>';
      }
      $output .= '</li>';
    }
  }
  $output .= '</ul>';
  return $output;
}

