<?php
// $Id$

/**
 * @file
 * E-Center network query interface.
 */
include_once('ecenter_network.features.inc');

// Load traceroute diff (to keep licensing issues clear)
require_once('ecenter_network_traceroute_diff.inc');

// Load services framework
require_once(dirname(__FILE__) . '/includes/ecenter_service.inc');

/**
 * Implementation of hook_menu().
 */
function ecenter_network_menu() {
  $items['network'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ecenter_network_select_form'),
    'access arguments' => array('access ecenter network'),
    'type' => MENU_CALLBACK,
  );

  $items['network/query'] = array(
    'page callback' => 'ecenter_network_display_data',
    'page arguments' => array(),
    'access arguments' => array('access ecenter network'),
    'type' => MENU_CALLBACK,
  );

  $items['network/health'] = array(
    'title' => 'Network health', 
    'page callback' => 'ecenter_network_health',
    'page arguments' => array(),
    'access arguments' => array('access ecenter network'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/ecenter'] = array(
    'title' => 'E-Center Network',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ecenter_network_admin_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer ecenter network'),
    'description' => 'Configure the E-Center network tools.',
    'file' => 'ecenter_network.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function ecenter_network_perm() {
  return array(
    'access ecenter network',
    'access ecenter anomaly data',
    'access ecenter forecasting data',
    'administer ecenter network',
    'debug ecenter network'
  );
}

/**
 * Implementation of hook_theme().
 */
function ecenter_network_theme() {
  $options = array(
    'file' => 'ecenter_network.theme.inc',
    'path' => drupal_get_path('module', 'ecenter_network') .'/theme',
  );
  $registry = array(
    'ecenter_network_hop_option' => array(
      'arguments' => array(
        'hop' => NULL,
      )
    ) + $options,
   'ecenter_network_data' => array(
      'template' => 'ecenter-network-data',
      'arguments' => array(
        'data' => NULL,
        'standalone' => FALSE,
      )
    ) + $options,
   'ecenter_network_recent_queries' => array(
      'arguments' => array('collapse' => NULL),
    ) + $options,
    'ecenter_network_recent_query' => array(
      'arguments' => array(
        'time' => NULL,
        'query' => NULL,
      ),
    ) + $options,
    'ecenter_network_traceroute' => array(
      'arguments' => array(
        'hops' => array(),
        'timezone' => NULL,
        'fds_data' => NULL,
      ),
    ) + $options,
    'ecenter_network_end_to_end' => array(
      'template' => 'ecenter-network-end-to-end',
      'arguments' => array(
        'data' => NULL,
        'timezone' => NULL,
        'ads_data' => NULL,
        'fds_data' => NULL,
        'standalone' => FALSE,
      ),
    ) + $options,
    'ecenter_network_end_to_end_tables' => array(
      'arguments' => array(
        'tables' => NULL,
        'timezone' => NULL,
      ),
    ) + $options,
    'ecenter_network_utilization_table' => array(
      'arguments' => array(
        'table' => NULL,
        'hop' => NULL,
        'direction' => NULL,
        'attributes' => array(),
        'capacity' => 0,
      ),
    ) + $options,
    'ecenter_network_format_default' => array(
      'arguments' => array(
        'value' => NULL,
        'type' => NULL,
        'measurement' => NULL,
        'units' => TRUE,
        'format' => NULL,
      ),
    ) + $options,
    'ecenter_network_format_default_label' => array(
      'arguments' => array(
        'measurement' => NULL,
        'type' => NULL,
        'direction' => NULL,
        'help' => FALSE,
      ),
    ) + $options,
    'ecenter_network_format_value' => array(
      'arguments' => array(
        'value' => NULL,
        'units' => NULL,
      ),
    ) + $options,
    'ecenter_network_health' => array(
      'template' => 'ecenter-network-health',
      'arguments' => array(
        'data' => NULL,
        'start' => NULL,
        'end' => NULL,
      ),
    ) + $options,
    'ecenter_network_health_row' => array(
      'arguments' => array(
        'metadata_count' => 0,
        'cached_data_count' => 0,
      ),
    ) + $options,
    'ecenter_network_site_centric_data' => array(
      'arguments' => array(
        'data' => NULL,
      ),
    ) + $options,
  );
  return $registry;
}

/**
 * Implementation of hook_init().
 */
function ecenter_network_init() {
  if (arg(0) == 'network' && !arg(1)) {
    // Compression type
    $compression = variable_get('jquery_update_compression_type', 'none');
    $min = ($compression != 'none') ? '.'. $compression : '';

    // Openlayers
    openlayers_include();
    drupal_add_js(drupal_get_path('module', 'openlayers') .
      '/includes/layer_types/js/raw.js');
    drupal_add_js(drupal_get_path('module', 'ecenter_network')
      .'/js/openlayers.js');
    drupal_add_js(drupal_get_path('module', 'ecenter_network')
      .'/openlayers/ecenter_network_behavior_dynamicload.js');
    drupal_add_js(drupal_get_path('module', 'ecenter_network')
      .'/openlayers/ecenter_network_behavior_select.js');

    // jQuery UI: Force version 1.8, load libraries for datepicker and combobox
    jquery_ui_add(array('ui.widget', 'ui.mouse', 'ui.button', 'ui.position', 'ui.autocomplete', 'ui.datepicker', 'ui.dialog'), '1.8');

    // jqPlot
    $jq_path = _jqplot_get_path();
    $tablechart_path = _jqplot_get_tablechart_path();
    drupal_add_css($jq_path .'/jquery.jqplot.css');
    drupal_add_js($jq_path .'/excanvas.min.js');
    drupal_add_js($jq_path .'/jquery.jqplot.js');
    drupal_add_js($jq_path .'/plugins/jqplot.dateAxisRenderer'. $min .'.js');
    drupal_add_js($jq_path .'/plugins/jqplot.highlighter'. $min .'.js');
    drupal_add_js($jq_path .'/plugins/jqplot.cursor'. $min .'.js');
    drupal_add_js($jq_path .'/plugins/jqplot.barRenderer'. $min .'.js');
    drupal_add_js($jq_path .'/plugins/jqplot.canvasTextRenderer'. $min .'.js');
    drupal_add_js($jq_path .'/plugins/jqplot.canvasAxisLabelRenderer'. $min .'.js');
    drupal_add_js($jq_path .'/plugins/jqplot.enhancedLegendRenderer'. $min .'.js');
    drupal_add_js(drupal_get_path('module', 'ecenter_network') .'/js/jqplot/jqplot.linehighlighter.js');
    drupal_add_js($tablechart_path .'/jquery.tablechart.js');
    drupal_add_js(drupal_get_path('module', 'jqplot') .'/js/jqplot-behaviors.js');

    // Combobox
    drupal_add_js(drupal_get_path('module', 'combobox') .'/js/combobox.js');
    drupal_add_js(drupal_get_path('module', 'combobox') .'/js/combobox-behaviors.js');

    // Raphael
    drupal_add_js(libraries_get_path('raphael') .'/raphael.js');

    // Traceroute
    drupal_add_js(drupal_get_path('module', 'ecenter_network') .'/js/jquery.traceroute.js');

    // Page behaviors
    drupal_add_js(drupal_get_path('module', 'ecenter_network') .'/js/behaviors.js');

    // Advanced help styling
    drupal_add_css(drupal_get_path('module', 'advanced_help') .'/help-icon.css');
  }
}

/**
 * Primary selection form definition.
 */
function _ecenter_network_select_form() {
  global $user;
  extract(_ecenter_network_extract_query());

  // Initialize time-related variables
  $default_start = variable_get('ecenter_network_default_end', 7200);
  $offset = variable_get('ecenter_network_default_offset', 600);
  $now = time();

  // Map
  $preset = openlayers_preset_load('ecenter_network');
  $map = openlayers_render_map($preset->data, $preset->name);

  // Cache build time
  $form['build_time'] = array(
    '#type' => 'value',
    '#value' => time(),
  );

  // Don't disable submit or validate callbacks
  $form['#ahah_enable_handlers'] = TRUE;

  // Network map
  $form['network_wrapper'] = array(
    '#prefix' => '<div id="network-wrapper" class="clear-block">',
    '#suffix' => '</div>',
  );
  $form['network_wrapper']['network'] = array(
    '#prefix' => '<div id="network-map">',
    '#value' => $map,
    '#suffix' => '</div>',
  );

  // Select source and destination IP -- convoluted structure because of AHAH
  $form['network_wrapper']['query'] = array(
    '#prefix' => '<div id="query-wrapper">',
    '#suffix' => '</div>',
  );

  // Source IP
  $form['network_wrapper']['query']['src_wrapper'] = array(
    '#prefix' => '<div id="src-wrapper">',
    '#suffix' => '</div>',
  );
  $form['network_wrapper']['query']['src_wrapper']['src'] = array(
    '#title' => t('Source'),
    '#type' => 'combobox',
    '#cols' => 50,
    '#clear_button' => TRUE,
    '#options' => array('' => t('Select a source')),
    '#prefix' => '<div class="src-wrapper">',
    '#suffix' => '</div>',
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('network_wrapper', 'query', 'dst_wrapper', 'dst')),
      'wrapper' => 'dst-wrapper',
    ),
  );

  // Destination IP
  $form['network_wrapper']['query']['dst_wrapper'] = array(
    '#prefix' => '<div id="dst-wrapper">',
    '#suffix' => '</div>',
  );
  $form['network_wrapper']['query']['dst_wrapper']['dst'] = array(
    '#title' => t('Destination'),
    '#type' => 'combobox',
    '#cols' => 50,
    '#clear_button' => TRUE,
    '#disabled' => TRUE,
    '#options' => array('' => t('Select a destination')),
    '#prefix' => '<div class="dst-wrapper">',
    '#suffix' => '</div>',
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('results_wrapper', 'results')),
      'wrapper' => 'results-wrapper',
    ),
  );

  $form['network_wrapper']['query']['traceroute_paste'] = array(
    '#title' => t('Traceroute'),
    '#type' => 'textarea',
    '#prefix' => '<div id="traceroute-paste-wrapper">',
    '#suffix' => '</div>',
    '#attributes' => array('id' => 'traceroute-paste'),
    '#ahah' => array(
      'event' => 'change',
      'path' => ahah_helper_path(array('results_wrapper', 'results')),
      'wrapper' => 'results-wrapper',
    ),
  );

  $form['network_wrapper']['query']['recent_select'] = array(
    '#type' => 'radios',
    '#title' => t('Show recent results'),
    '#prefix' => '<div id="recent-select">',
    '#suffix' => '</div>',
    '#options' => array(
      3 => t('Last 3 hours'),
      6 => t('Last 6 hours'),
      12 => t('Last 12 hours'),
      24 => t('Last day'),
    ),
    '#default_value' => 3,
  );

  $form['network_wrapper']['query']['date_separator'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="or-wrapper">',
    '#suffix' => '</div>',
    '#value' =>  t('Or'),
  );

  $form['network_wrapper']['query']['date_select'] = array(
    '#type' => 'date_popup',
    '#title' => t('Specify day'),
    '#prefix' => '<div id="date-select">',
    '#suffix' => '</div>',
    '#date_format' => 'Y-m-d',
    '#granularity' => array('year', 'month', 'day'),
    '#default_value' => NULL,
  );

  $form['network_wrapper']['query']['start'] = array(
    '#type' => 'hidden',
    '#value' => NULL,
  );
  $form['network_wrapper']['query']['end'] = array(
    '#type' => 'hidden',
    '#value' => NULL,
  );

  if (!empty($start) && !empty($end)) {
    $form['network_wrapper']['query']['start']['#value'] = $start;
    $form['network_wrapper']['query']['end']['#value'] = $end;
    unset($form['network_wrapper']['query']['recent_select']['#default_value']);
  }
 
  // Submit button
  $form['network_wrapper']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array('class' => 'no-js'),
  );

  // Data results display
  $form['results_wrapper'] = array(
    '#prefix' => '<div id="results-wrapper" class="clearfix">',
    '#suffix' => '</div>',
  );

  // For ahah helper
  $form['#tree'] = TRUE;

  return $form;
}

/**
 * Primary selection form.
 *
 * The basic form is defined in _ecenter_network_select_form. This function
 * primarily processes the form.
 */
function ecenter_network_select_form(&$form_state) {
  global $user;

  // Bail if the service is down
  ecenter_network_get_client('503');
  
  // Get base form and register with ahah_helper
  $form = _ecenter_network_select_form();
  ahah_helper_register($form, $form_state);

  extract(_ecenter_network_extract_query());

  // Refresh map
  ecenter_network_refresh_map('ecenter_network', 'openlayers-map-auto-id-0');

  // Set dates
  if (!empty($start)) {
    $form['network_wrapper']['query']['start']['#default_value'] = 
      _ecenter_network_utc_to_local($start);
  }
  if (!empty($end)) {
    $form['network_wrapper']['query']['end']['#default_value'] = 
      _ecenter_network_utc_to_local($end);
  }

  if (empty($timezone)) {
    $user_timezone = $user->timezone_name ? $user->timezone_name 
      : variable_get('date_default_timezone_name', NULL);
  }
  else {
    $user_timezone = $timezone;
  }
  
  $sources = ecenter_network_get_hops();

  $src_options[0] = '';

  if (!empty($sources)) {
    foreach ($sources['hubs'] as $key => $hop) {
      $src_options['hub:'. $key] = theme('ecenter_network_hop_option', $hop);
    }
    $form['network_wrapper']['query']['src_wrapper']['src']['#options'] += $src_options;
    if (!empty($src)) {
      $form['network_wrapper']['query']['src_wrapper']['src']['#default_value'] = $src;
      list($src_type, $src_value) = explode(':', $src, 2);
      $destinations = ecenter_network_get_hops($src_value, $src_type);
      $dst_options[0] = '';
      foreach ($destinations['hubs'] as $key => $hop) {
        $dst_options['hub:'. $key] = theme('ecenter_network_hop_option', $hop);
      }
      $form['network_wrapper']['query']['dst_wrapper']['dst']['#options'] += $dst_options;
      $form['network_wrapper']['query']['dst_wrapper']['dst']['#disabled'] = FALSE;
    }

    if (!empty($dst)) {
      $form['network_wrapper']['query']['dst_wrapper']['dst']['#default_value'] = $dst;
    }
  }

  if (!empty($start) && !empty($end)) {
    
    $params = array(
      'start' => $start,
      'end' => $end,
      'timezone' => $user_timezone,
    );

    if (!empty($traceroute)) {
      $data = array(
        'drs' => ecenter_network_get_traceroute_data($traceroute, $start, $end)
      );
    }
    elseif (!empty($src) && !empty($dst)) {
      $data = array(
        'drs' => ecenter_network_get_data($src, $dst, $start, $end)
      );

      $params += array(
        'src' => $src,
        'dst' => $dst,
        'fds' => 0,
        'ads' => 0,
      );

      if ($ads) {
        $data['ads'] = ecenter_network_get_ads_data($src, $dst, $start, $end, $algorithm, $detector_type, $sensitivity, $elevation1, $elevation2, $swc);
        $params['ads'] = 1;
      }

      if ($fds) {
        $data['fds'] = ecenter_network_get_fds_data($src, $dst, $start, $end, $fds_type);
        $params['fds'] = 1;
      }
    }

    $data['parameters'] = $params;

    // If we've got the data (at bare minimum, a traceroute), delegate to rendering function
    if ($data['drs']) {
      $form['results_wrapper']['results']['#value'] =
        theme('ecenter_network_data', $data);
      $form['results_wrapper']['recent']['#value'] =
        theme('ecenter_network_recent_queries', TRUE);
    }
  }
  else {
    $form['results_wrapper']['#value'] = theme('ecenter_network_recent_queries');
  }
  return $form;
}

/**
 * Default submit handler for network form
 */
function ecenter_network_select_form_submit($form, &$form_state) {
  global $user;

  // Do what AHAH helper does on an AJAX call, to make form constructor a
  // little less crazy
  $inc = variable_get('ecenter_network_time_increment', 30);

  if (empty($form_state['post']['timezone'])) {
    $tz = $user->timezone_name ? $user->timezone_name 
      : variable_get('date_default_timezone_name', NULL);
  }
  else {
    $tz = $form_state['post']['timezone'];
  }
  $tz = timezone_open($tz);

  if ($form_state['values']['network_wrapper']['query']['recent_select']
    && !$form_state['values']['network_wrapper']['query']['date_select']) {

    $date = $form_state['values']['build_time'];
    $offset = 3600 * $form_state['values']['network_wrapper']['query']['recent_select'];
    $end = date_make_date($date, $tz, DATE_UNIX);
    $start = date_make_date($date - $offset, $tz, DATE_UNIX);

    date_increment_round($start, $inc);
    date_increment_round($end, $inc);

    $start = date_format($start, 'Y-m-d H:i:00');
    $end = date_format($end, 'Y-m-d H:i:00');
  }
  else if ($form_state['values']['network_wrapper']['query']['date_select']) {
    $date = $form_state['values']['network_wrapper']['query']['date_select'];
    $day = date_make_date($date, $tz);

    $start = date_format($day, 'Y-m-d H:i:00');
    $end_date = date_modify($day, '+24 hours');
    $end = date_format($day, 'Y-m-d H:i:00');
  }

  // Overwrite post variables
  if (isset($start) && isset($end)) {
    $form_state['values']['network_wrapper']['query']['start'] = $start;
    $form_state['values']['network_wrapper']['query']['end'] = $end;

    // @TODO Set request variables -- seems hackish at this point
    $_REQUEST['network_wrapper']['query']['start'] = $start;
    $_REQUEST['network_wrapper']['query']['end'] = $end;
  }

  $form_state['storage'] = $form_state['values'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Implementation of ecenter_network_end_to_end_measurements_alter().
 */
function ecenter_network_ecenter_network_end_to_end_measurements_alter(&$data, $timestamp, $measurements) {
  unset($measurements['metaid'], $measurements['timestamp']);
  $timeseries = array();
  foreach ($measurements as $measurement => $value) {
    if ($measurement != 'sent') {
      $data[$measurement]['timeseries'][$timestamp] = (float) $value;
    }
  }
  if (!empty($data[$measurement]['timeseries'])) {
    ksort($data[$measurement]['timeseries']);
  }
}

/**
 * Implementation of ecenter_network_end_to_end_measurements_statistics_alter().
 */
function ecenter_network_ecenter_network_end_to_end_measurements_statistics_alter(&$data) {
  foreach ($data as $measurement => $measurements) {
    $values = $measurements['timeseries'];
    $count = count($values);
    $keys = array_keys($values);
    $data[$measurement]['statistics'] = array(
      'mean' => array_sum($values)/$count,
      'max' => max($values),
      'min' => min($values),
    );
  }
}

/**
 * Implementation of hook_jqplot_plugins().
 */
function ecenter_network_jqplot_plugins() {
  $path = drupal_get_path('module', 'ecenter_network') .'/js/jqplot';
  return array(
    'linehighlighter' => $path .'/jqplot.linehighlighter.js',
  );
}

/**
 * Implementation of hook_openlayers_presets().
 */
function ecenter_network_openlayers_presets() {

  $items = array();
  $openlayers_presets = new stdClass;
  $openlayers_presets->disabled = FALSE; 
  $openlayers_presets->api_version = 1;
  $openlayers_presets->name = 'ecenter_network';
  $openlayers_presets->title = 'E-Center Network';
  $openlayers_presets->description = 'E-Center network weathermap';
  $openlayers_presets->data = array(
    'width' => '660px',
    'height' => '400px',
    'image_path' => 'http://js.mapbox.com/theme/dark/',
    'css_path' => '',
    'proxy_host' => '',
    'hide_empty_map' => 0,
    'center' => array(
      'initial' => array(
        'centerpoint' => '-99.528515621067, 39.112468787821',
        'zoom' => '4',
      ),
    ),
    'behaviors' => array(
      'openlayers_behavior_navigation' => array(
        'zoomWheelEnabled' => 0,
      ),
      'openlayers_behavior_panzoom' => array(),
      'openlayers_behavior_fullscreen' => array(
        'activated' => 0,
      ),
      'ecenter_network_behavior_select' => array(
        'layers' => array(
          'ecenter_network_sites' => 'ecenter_network_sites',
          'ecenter_network_traceroute' => 'ecenter_network_traceroute',
        ),
      ),
      'ecenter_network_behavior_dynamicload' => array(),
      'ecenter_network_behavior_curves' => array(
        'layers' => array(
          'ecenter_network_traceroute' => 'ecenter_network_traceroute',
        ),
        'style' => 'ecenter_curve',
      ),
    ),
    'default_layer' => 'world_glass',
    'layers' => array(
      'world_glass' => 'world_glass',
      'ecenter_network_sites' => 'ecenter_network_sites',
      'ecenter_network_traceroute' => 'ecenter_network_traceroute',
    ),
    'layer_activated' => array(
      'ecenter_network_sites' => 'ecenter_network_sites',
      'ecenter_network_traceroute' => 'ecenter_network_traceroute',
    ),
    'projection' => '900913',
    'styles' => array(
      'default' => 'ecenter_default',
      'select' => 'ecenter_selected',
      'temporary' => 'default',
    ),
    'preset_name' => 'ecenter_network',
  );
  $items["ecenter_network"] = $openlayers_presets;
  return $items;
}

/**
 * Implementation of hook_openlayers_styles().
 */
function ecenter_network_openlayers_styles() {
  $styles = array();

  // Default
  $style = new stdClass();
  $style->api_version = 1;
  $style->name = 'ecenter_default';
  $style->title = t('E-center style');
  $style->description = t('Basic e-center style.');
  $style->data = array(
    'pointRadius' => 6,
    'fillColor' => '#ffffff',
    'strokeColor' => '#0000aa',
    'strokeWidth' => 2,
    'fillOpacity' => 1,
    'graphicZIndex' => 99,
  );
  $styles[$style->name] = $style;

  // Selected
  $style = new stdClass();
  $style->api_version = 1;
  $style->name = 'ecenter_selected';
  $style->title = t('E-center selected style');
  $style->description = t('Basic e-center style.');
  $style->data = array(
    'pointRadius' => 6,
    'fillColor' => '#ffffff',
    'strokeColor' => '#777777',
    'strokeWidth' => 2,
    'fillOpacity' => 1,
    'graphicZIndex' => 99,
  );
  $styles[$style->name] = $style;

  // Curve
  $style = new stdClass();
  $style->api_version = 1;
  $style->name = 'ecenter_curve';
  $style->title = t('E-center curve style');
  $style->description = t('Basic e-center curve style.');
  $style->data = array(
    'pointRadius' => 6,
    'fillColor' => '#ffffff',
    'strokeColor' => '#0000aa',
    'strokeWidth' => 2,
    'fillOpacity' => 1,
    'graphicZIndex' => 0,
  );
  $styles[$style->name] = $style;

  return $styles;
}

/**
 * Implementation of hook_openlayers_behaviors().
 */
function ecenter_network_openlayers_behaviors() {
  $behaviors = array(
    'ecenter_network_behavior_dynamicload' => array(
      'title' => t('E-Center Network: Dynamic Load'),
      'behavior' => array(
        'path' => drupal_get_path('module', 'ecenter_network') .'/openlayers',
        'file' => 'ecenter_network_behavior_dynamicload.inc',
        'class' => 'ecenter_network_behavior_dynamicload',
        'parent' => 'openlayers_behavior',
      ),
    ),
    'ecenter_network_behavior_select' => array(
      'title' => t('E-Center Network: Select behavior'),
      'behavior' => array(
        'path' => drupal_get_path('module', 'ecenter_network') .'/openlayers',
        'file' => 'ecenter_network_behavior_select.inc',
        'class' => 'ecenter_network_behavior_select',
        'parent' => 'openlayers_behavior',
      ),
    ),
    'ecenter_network_behavior_curves' => array(
      'title' => t('E-Center Network: Curved lines'),
      'behavior' => array(
        'path' => drupal_get_path('module', 'ecenter_network') .'/openlayers',
        'file' => 'ecenter_network_behavior_curves.inc',
        'class' => 'ecenter_network_behavior_curves',
        'parent' => 'openlayers_behavior',
      ),
    ),
    'ecenter_network_behavior_uncluster' => array(
      'title' => t('E-Center Network: Uncluster'),
      'behavior' => array(
        'path' => drupal_get_path('module', 'ecenter_network') .'/openlayers',
        'file' => 'ecenter_network_behavior_uncluster.inc',
        'class' => 'ecenter_network_behavior_uncluster',
        'parent' => 'openlayers_behavior',
      ),
    ),

  );
  return $behaviors;
}

/**
 * Implementation of hook_openlayers_layers().
 */
function ecenter_network_openlayers_layers() {
  $layers = array();
  $layers['ecenter_network_traceroute'] = ecenter_network_layers_traceroute();
  $layers['ecenter_network_sites'] = ecenter_network_layers_sites();

  $mapbox_layer = new stdClass;
  $mapbox_layer->disabled = FALSE; /* Edit this to true to make a default mapbox_layer disabled initially */
  $mapbox_layer->api_version = 1;
  $mapbox_layer->name = 'world_glass';
  $mapbox_layer->title = 'World glass';
  $mapbox_layer->description = 'A transparent world map base layer.';
  $mapbox_layer->data = array(
    'layername' => 'world-glass',
    'layer_type' => 'openlayers_layer_type_mapbox',
    'osm' => 0,
    'baselayer' => 1,
    'type' => 'png',
    'projection' => array('900913'),
    'resolutions' => array(
      0 => 156543.0339,
      1 => 78271.51695,
      2 => 39135.758475,
      3 => 19567.8792375,
      4 => 9783.93961875,
      5 => 4891.969809375,
      6 => 2445.9849046875,
      7 => 1222.9924523438,
      8 => 611.49622617188,
      9 => 305.74811308594,
    ),
    'maxExtent' => openlayers_get_extent('900913'), 
  );
  $layers['world_glass'] = $mapbox_layer;

  return $layers;
}

/**
 * Generate site map
 */
function ecenter_network_layers_sites() {
  extract(_ecenter_network_extract_query());
  $sources = ecenter_network_get_hops();

  if (empty($sources)) {
    return;
  }

  // Calculate destinations
  if (!empty($src)) {
    list($src_type, $src_value) = explode(':', $src, 2);
    $hops = ecenter_network_get_hops($src_value, $src_type);
    if ($src_type == 'hub') {
      array_unshift($hops['hubs'], $sources['hubs'][$src_value]);
    }
    else if ($src_type == 'ip') {
      array_unshift($hops['hubs'], $sources['hops'][$src_value]);
    }
  }
  else {
    $hops = $sources;
  }

  // Create layer object
  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'ecenter_network_sites';
  $layer->title = t('E-center Network Sites');
  $layer->description = '';
  $layer->data = array(
    'layer_type' => 'openlayers_layer_type_raw',
    'projection' => array('900913'),
  );

  if (!empty($src) && !empty($dst) && !empty($start) && !empty($end)) {
    $data = ecenter_network_get_data($src, $dst, $start, $end);
  }

  if (empty($src) || empty($dst) || empty($start) || empty($end)) {
    foreach ($hops['hubs'] as $hub) {
      $features[] = array(
        'wkt' => "POINT({$hub['longitude']} {$hub['latitude']})",
        'projection' => "4326",
        'style' => array(
          'pointRadius' => 5,
          'fillColor' => '#ffffff',
          'fillOpacity' => 1,
          'strokeColor' => '#4682b4',
          'strokeWidth' => 3,
          'strokeOpacity' => 1,
          'label' => $hub['hub_name'],
          'labelYOffset' => 17,
          'fontWeight' => 'bold',
          'fontSize' => '14px',
          'fontFamily' => '"Droid Sans", "Helvetica Neue", Helvetica, Verdana, sans-serif',
          'fontColor' => '#4682B4',
        ),
        'extra' => array(
          'ecenterID' => $hub['hub_name'], 
          'coords' => array('lat' => $hub['latitude'], 'lon' => $hub['longitude']),
        ),
      );
    }
    // @TODO remove when unclustering works
    _ecenter_network_layers_sites_rejigger($features);
    $layer->data['features'] = $features;
  }

  return $layer;
}

/**
 * @TODO HARDCODED BADNESS -- create "unclustering" behavior as replacement
 */
function _ecenter_network_layers_sites_rejigger(&$features) {
  foreach ($features as $k => $feature) {
    switch ($feature['extra']['ecenterID']) {
      case 'PPPL':
        $features[$k]['style']['labelYOffset'] = -20;
        $features[$k]['style']['labelXOffset'] = -5;
        break;
      case 'SLAC':
        $features[$k]['style']['labelYOffset'] = -5;
        $features[$k]['style']['labelXOffset'] = -30;
        break;
      case 'ANL':
        $features[$k]['style']['labelYOffset'] = -20;
        $features[$k]['style']['labelXOffset'] = 4;
        $lat = $features[$k]['extra']['coords']['lat'] - 0.4;
        $lon = $features[$k]['extra']['coords']['lon'];
        $features[$k]['wkt'] = "POINT({$lon} {$lat})";
        break;
      case 'NERSC':
        $lat = $features[$k]['extra']['coords']['lat'] + 0.4;
        $lon = $features[$k]['extra']['coords']['lon'] - 0.4;
        $features[$k]['style']['labelXOffset'] = -37;
        $features[$k]['style']['labelYOffset'] = 5;
        $features[$k]['wkt'] = "POINT({$lon} {$lat})";
        break;
      case 'LBL':
        $features[$k]['style']['labelXOffset'] = 24;
        $features[$k]['style']['labelYOffset'] = 5;
        $lat = $features[$k]['extra']['coords']['lat'] + .5;
        $lon = $features[$k]['extra']['coords']['lon'] + 1.1;
        $features[$k]['wkt'] = "POINT({$lon} {$lat})";
        break;
      case 'LLNL':
        $features[$k]['style']['labelXOffset'] = 15;
        $features[$k]['style']['labelYOffset'] = -15;
        $lat = $features[$k]['extra']['coords']['lat'] - 1;
        $lon = $features[$k]['extra']['coords']['lon'] + .3;
        $features[$k]['wkt'] = "POINT({$lon} {$lat})";
        break;
      case 'JGI':
        $features[$k]['style']['labelXOffset'] = 5;
        $features[$k]['style']['labelYOffset'] = 15;
        $lat = $features[$k]['extra']['coords']['lat'] + 1;
        $lon = $features[$k]['extra']['coords']['lon'];
        $features[$k]['wkt'] = "POINT({$lon} {$lat})";
        break;
      case 'SNLL':
        $features[$k]['style']['labelXOffset'] = 30;
        $features[$k]['style']['labelYOffset'] = 0;
        $lat = $features[$k]['extra']['coords']['lat'] - .1;
        $lon = $features[$k]['extra']['coords']['lon'] + .75;
        $features[$k]['wkt'] = "POINT({$lon} {$lat})";
        break;
      case 'PNWG':
        $features[$k]['wkt'] = "POINT(-119.16 46.20)";
        break;
      default:
        break;
    }
  }
}

/**
 * Generate dynamic raw layer data for E-center network
 */
function ecenter_network_layers_traceroute() {
  extract(_ecenter_network_extract_query());

  $layer = new stdClass();
  $layer->api_version = 1;
  $layer->name = 'ecenter_network_traceroute';
  $layer->title = t('Dynamic traceroute');
  $layer->description = '';
  $layer->data = array(
    'layer_type' => 'openlayers_layer_type_raw',
    'projection' => array('900913'),
    'options' => array(
      'rendererOptions' => array('zIndexing' => TRUE),
    ),
  );

  if (!empty($src) && !empty($dst) && !empty($start) && !empty($end)) {

    $data = ecenter_network_get_data($src, $dst, $start, $end);

    $direction = (!empty($data['traceroute']['forward'])) ? 'forward' : 'reverse';

    if ($data && !empty($data['traceroute'][$direction])) {

      // Initialize some counters, etc
      $old_hop = NULL;
      $count = count($traceroute);

      $features = array();
      foreach ($data['traceroute']['diff'] as $ttl => $diff_data) {
        $hops = array_pop($diff_data);
        foreach ($hops[$direction] as $hop) {
          if ($hop['longitude'] && $hop['latitude']) {
            $features[] = array(
              'wkt' => "POINT({$hop['longitude']} {$hop['latitude']})",
              'projection' => "4326",
              'style' => array(
                'pointRadius' => 5,
                'fillColor' => '#ffffff',
                'strokeColor' => '#0000ff',
                'strokeWidth' => 3,
                'fillOpacity' => 1,
                'label' => $hop['hub'],
                'labelYOffset' => -16,
                'fontWeight' => 'bold',
                'fontSize' => '12px',
                'fontFamily' => '"Droid Sans", "Helvetica Neue", Helvetica, Verdana, sans-serif',
                'fontColor' => '#222222',
                'graphicZIndex' => 10,
              ),
              'extra' => array(
                'ecenterID' => $ttl .'_'. $hop['hub_name'],
              ),
            );
          }
          $old_hop = $hop;
        }
      }
    }

    if (!empty($features)) {
      _ecenter_network_layers_traceroute_rejigger($features);
    }
    $layer->data['features'] = $features;
  }
  return $layer;
}

/**
 * @TODO HARDCODED BADNESS along same lines as sites above
 */
function _ecenter_network_layers_traceroute_rejigger(&$features) {
  foreach ($features as $k => $feature) {
    switch ($feature['extra']['ecenterID']) {
      case 'bnl-mr2':
        $features[$k]['style']['labelXOffset'] = 35;
        $features[$k]['style']['labelYOffset'] = 0;
        break;
      case 'chic-cr1':
        $features[$k]['style']['labelXOffset'] = 10;
        $features[$k]['style']['labelYOffset'] = -15;
        break;
      case 'bost-cr1':
        $features[$k]['style']['labelXOffset'] = 10;
        $features[$k]['style']['labelYOffset'] = 15;
        break;
      case 'lbl-mr2':
        $features[$k]['style']['labelXOffset'] = -15;
        $features[$k]['style']['labelYOffset'] = 20;
        break;
      case 'star-cr1':
        $features[$k]['style']['labelXOffset'] = 35;
        $features[$k]['style']['labelYOffset'] = 10;
        break;
      case 'star-sdn1':
        $features[$k]['style']['labelXOffset'] = 30;
        break;
      case 'slac-mr2':
      case 'snv-mr2':
        $features[$k]['style']['labelXOffset'] = -35;
        $features[$k]['style']['labelYOffset'] = 0;
        break;
      case 'wash-sdn2':
        $features[$k]['style']['labelXOffset'] = -40;
        $features[$k]['style']['labelYOffset'] = 0;
        break;
      case 'sunn-cr1':
      case 'llnl-mr2':
      case 'wash-cr1':
        $features[$k]['style']['labelXOffset'] = 40;
        $features[$k]['style']['labelYOffset'] = 0;
        break;
      case 'pppl-rt2':
        $features[$k]['style']['labelYOffset'] = 15;
        break;
      default:
        break;
    }
  }
}

/**
 * Implementation of hook_openlayers_map_alter().
 */
function ecenter_network_openlayers_map_alter(&$map) {
  if ($map['preset_name'] == 'ecenter_network') {
    foreach ($map['layers'] as $name => $layer) {
      if ($layer['baselayer'] == TRUE) {
        $map['layers'][$name]['numZoomLevels'] = 12;
      }
    }
  }
}

/**
 * Implementation of hook_openlayers_map_preprocess_alter().
 */
function ecenter_network_openlayers_map_preprocess_alter(&$map) {
  // Add the new layers to the map array for our behavior to use
  if ($map['preset_name'] == 'ecenter_network') {
    $client = ecenter_network_get_client();

    // Get variables
    extract(_ecenter_network_extract_query());

    if (!empty($src) && !empty($dst) && !empty($start) && !empty($end)) {
      $data = ecenter_network_get_data($src, $dst, $start, $end);

      if ($data && !empty($data['forward'])) {
        $map['layers']['ecenter_traceroute'] = 'ecenter_traceroute';
        $map['layer_styles']['ecenter_traceroute'] = 'ecenter_default';
        $map['layer_activated']['ecenter_traceroute'] = 'ecenter_traceroute';
      }
    }
  }
  return $map;
}

/**
 * Refresh an Openlayers map
 *
 * This function is necessary because openlayers_render_map uses a small hack
 * and uses json_encode and adds map settings to the page header.  This
 * function adds the map array to the Drupal JS settings array no matter what,
 * so that AJAX/AHAH will work properly.
 *
 * @param $preset
 *   A string preset name.
 * @param $id
 *   Optional ID to use for map.
 */
function ecenter_network_refresh_map($preset, $id = NULL) {
  openlayers_include();
  $preset = openlayers_preset_load($preset);

  // Run map through build process
  $map = openlayers_build_map($preset->data);
  $map['id'] = (!empty($id)) ? $id : $map['id'];

  // Set proper JS settings
  if (empty($map['errors'])) {
    $js = array('openlayers' => array('maps' => array($map['id'] => $map)));
    drupal_add_js($js, 'setting');
  }
}

/**
 * Implementation of template_preprocess_page().
 */
function ecenter_network_preprocess_page(&$vars) {
  // Add body class to weathermap
  if (arg(0) == 'network' && !arg(1)) {
    $vars['body_classes'] .= ' page-network-weathermap';
  }
}

/**
 * Convert formatted local date string to formatted UTC date string
 *
 * @param $date
 *   A date string
 * @param $format
 *   Format to use for return value.
 * @return string
 *   Formatted, converted date
 */
function _ecenter_network_local_to_utc($date, $format = 'Y-m-d H:i:s', $tz = '') {
  if (empty($date)) {
    return NULL;
  }

  if (empty($tz)) {
    $tz = date_default_timezone_name(TRUE);
  }
  $adjusted = date_create($date, timezone_open($tz));
  date_timezone_set($adjusted, timezone_open('UTC'));
  return date_format($adjusted, $format);
}

/**
 * Adjust formatted UTC date string to formatted local date string
 *
 * @param $date
 *   A date string
 * @param $format
 *   Format to use for return value.
 * @return string
 *   Formatted, converted date
 */
function _ecenter_network_utc_to_local($date, $format = 'Y-m-d H:i:s', $tz = '') {
  if (empty($date)) {
    return NULL;
  }

  if (empty($tz)) {
    $tz = date_default_timezone_name(TRUE);
  }
  $adjusted = date_create($date, timezone_open('UTC'));
  date_timezone_set($adjusted, timezone_open($tz));
  return date_format($adjusted, $format);
}

/**
 * Convert Unix timestamp to formatted local date string
 *
 * @param $date
 *   A date string
 * @param $format
 *   Format to use for return value.
 * @return string
 *   Formatted, converted date
 */
function _ecenter_network_timestamp_to_local($date, $format = 'Y-m-d H:i:s', $tz = FALSE) {
  if (empty($date)) {
    return NULL;
  }

  $adjusted = date_make_date($date, timezone_open('UTC'), DATE_UNIX);
  if (empty($tz)) {
    $tz = date_default_timezone_name(TRUE);
  }
  date_timezone_set($adjusted, timezone_open($tz));
  return date_format($adjusted, $format);
}

/**
 * Callback for remove underscores from timezone names for use with combobox
 */
function _ecenter_network_process_tz_name($val) {
  return str_replace('_', ' ', $val);
}

/**
 * Package query variables as an array
 *
 * E-Center queries can come from form input, or query string variables.  Let's
 * not worry about WHERE they came from during data processing.  Typically, you
 * should invoke by extract()ing the contents of the array.
 *
 * @return array
 *  An array of query values
 */
function _ecenter_network_extract_query() {
  $vars = array();

  if (!empty($_REQUEST['form_id']) && $_REQUEST['form_id'] == 'ecenter_network_select_form') {
    $vars = array(
      'src' => $_REQUEST['network_wrapper']['query']['src_wrapper']['src'],
      'dst' => $_REQUEST['network_wrapper']['query']['dst_wrapper']['dst'],
      'start' => _ecenter_network_local_to_utc($_REQUEST['network_wrapper']['query']['start']),
      'end' => _ecenter_network_local_to_utc($_REQUEST['network_wrapper']['query']['end']),
      'timezone' => $_REQUEST['timezone'],


      'traceroute' => $_REQUEST['network_wrapper']['query']['traceroute_paste'],
    );

    if (user_access('access ecenter forecasting data')) {
      $vars += array(
        'fds' => $_REQUEST['fds'],
        'fds_type' => $_REQUEST['fds_type'],
      );
    }

    if (user_access('access ecenter anomaly data')) {
      $vars += array(
        'ads' => $_REQUEST['ads'],
        'algorithm' => $_REQUEST['algorithm'],
        'detector_type' => $_REQUEST['detector_type'],
        'sensitivity' => $_REQUEST['sensitivity'],
        'elevation1' => $_REQUEST['elevation1'],
        'elevation2' => $_REQUEST['elevation2'],
        'swc' => $_REQUEST['swc'],
      );
    }
  }
  else {
    foreach (array('src', 'dst', 'start', 'end', 'timezone',  'fds', 'fds_type') as $key) {
      if (empty($vars[$key]) && !empty($_REQUEST[$key])) {
        $vars[$key] = $_REQUEST[$key];
      }
    }
    if (user_access('access ecenter anomaly data')) {
      foreach (array('ads', 'algorithm', 'detector_type', 'sensitivity', 'elevation1', 'elevation2', 'swc') as $key) {
        if (empty($vars[$key]) && !empty($_REQUEST[$key])) {
          $vars[$key] = $_REQUEST[$key];
        }
      }
    }
    if (user_access('access ecenter forecasting data')) {
      foreach (array('fds', 'fds_type') as $key) {
        if (empty($vars[$key]) && !empty($_REQUEST[$key])) {
          $vars[$key] = $_REQUEST[$key];
        }
      }
    }
  }

  if (!empty($vars['ads']) && empty($vars['algorithm'])) {
    $vars['algorithm'] = 'spd';
  }
  
  if (!empty($vars['fds']) && empty($vars['fds_type'])) {
    $vars['fds_type'] = 'snmp';
  }

  return $vars;
}
